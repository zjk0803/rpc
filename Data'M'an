using Assets._07.Network;
using Sts.Model;
using Sts.SaveDataManagement;
using Sts.Utils;
using System;
using System.Collections;
using System.Collections.Generic;
using thrift.sts;
using UnityEngine;
using UnityEngine.Events;
using static UI_HeroInfoModel;
using Attribute = Sts.Model.Attribute;
using CargoData = Sts.SaveDataManagement.CargoData;
using Equipment = Sts.Model.Equipment;
using Item = Sts.Model.Item;

namespace Sts.Manager
{
    public enum Environment
    {
        none = 0,
        pro = 1, //生产环境
        dev = 2, //开发环境
        test = 3,//测试环境
        pre = 4, //灰度环境
    }

    public enum PlayerStatus
    {
        idle = 0,//闲置状态，登录时位于主城界面
        basicPlot = 1,//位于主线战斗中，登录时根据对应的信息进入对应的战斗
    }
    public enum PlayerPlace
    {
        battle = 0,//位于战斗中，任何切换操作都将被立即执行
        lobby = 1,//位于主城中，一部分切换操作会在离开主城后执行

    }
    /// <summary>
    /// 游戏数据管理中心
    /// </summary>
    public class DataManager
    {
        private static DataManager _instance = new DataManager();
        public static DataManager Instance
        {
            get
            {
                if (_instance == null)
                {
                    _instance = new DataManager();
                }
                return _instance;
            }
        }
        //DataManager Method
        //清除当前缓存数据
        public void Clear()
        {
            _instance = null;
        }
        //重置数据 待弃用
        public void ReastDataManager()
        {
            _instance = null;
        }
        //--------------------------------Module------------------------------------//
        //游戏设置信息模块
        private SettingModel settingModel = new SettingModel();
        public static SettingModel SettingModel { get { return Instance.settingModel; } }

        //新手引导数据模块
        private GuideModel guideModel = new GuideModel();
        public static GuideModel GuideModel { get { return Instance.guideModel; } }
        public bool finishGuide { get { return userData.FinishGuide; } set { userData.FinishGuide = value; SaveDataManager.Instance.Save(); } }

        //主角技能数据模块
        public static LeaderSkillModel LeaderSkillModel { get { return Instance.leaderSkillModel; } }
        private LeaderSkillModel leaderSkillModel = new LeaderSkillModel();

        //试炼迷宫数据模块
        public UI_MazeBattleModel mazeData = new UI_MazeBattleModel();

        //讨伐玩法数据模块
        private CrusadeModel crusadeModel = new CrusadeModel();
        public static CrusadeModel CrusadeModel { get { return Instance.crusadeModel; } }

        //永冬之地
        private FortressDataModel fortressDataModel;
        public static FortressDataModel FortressDataModel { get { if (Instance.fortressDataModel == null) { Instance.fortressDataModel = new FortressDataModel(); } return Instance.fortressDataModel; } }

        //无尽之塔数据模块
        private UI_ThroneTowerModel towerModel = new UI_ThroneTowerModel();
        public static UI_ThroneTowerModel TowerModel { get { return Instance.towerModel; } }

        //阅历数据模块
        public ExperienceModel experienceModel = new ExperienceModel();

        //成就数据模块 
        public AchievementManager achData = new AchievementManager();

        //建筑升级数据模块
        private UpgradeBuildingModel upgradeBuildingModel;
        public static UpgradeBuildingModel UpgradeBuildingModel { get { if (Instance.upgradeBuildingModel == null) { Instance.upgradeBuildingModel = new UpgradeBuildingModel(); } return Instance.upgradeBuildingModel; } }

        //编队数据模块
        private FormationModel formationModel;
        public static FormationModel FormationModel { get { if (Instance.formationModel == null) { Instance.formationModel = new FormationModel(); } return Instance.formationModel; } }
        public List<HeroTeamInfo> heroTeamInfoList { get { return formationModel.FormationTeamList; } }
        public Hero[] currentBattleTeamHeros { get { return FormationModel.CurTeamInfo.teamHeros; } }

        //老版UI编队模块
        private UI_TeamEditModel ui_TeamEditModel;
        public static UI_TeamEditModel UI_TeamEditModel { get { if (Instance.ui_TeamEditModel == null) { Instance.ui_TeamEditModel = new UI_TeamEditModel(); } return Instance.ui_TeamEditModel; } }

        //支线任务
        private TaskStoryModel taskStoryData = new TaskStoryModel();
        public static TaskStoryModel TaskStoryData { get { return Instance.taskStoryData; } }

        //好感度数据
        public static UI_heroFavoriteModel heroFavourData { get { return Instance.heroFavoriteModel; } }
        private UI_heroFavoriteModel heroFavoriteModel = new UI_heroFavoriteModel();

        //探索章节数据模块
        private ExploreChapterModel exploreChapterModel;
        public static ExploreChapterModel ExploreChapterModel { get { if (Instance.exploreChapterModel == null) { Instance.exploreChapterModel = new ExploreChapterModel(); } return Instance.exploreChapterModel; } }

        //装备道具模块

        //用户数据模块



        //英雄信息数据模块

        //-------------------------------------------------------------------------------------------------------//
        //用户存档信息
        private SaveDataManagement.UserData userData { get { return SaveDataManager.Instance.GetUserData(); } }
        //转生沙盒数据
        private UserData_Temp tempData { get { return SaveDataManager.Instance.GetTempData(); } }
        ///--------------------DataManager自身的属性--------------------
        //发布生产环境 pro  开发模式 dev
        private Environment DevelopmentModel = Environment.dev;
        public float sendlogTime = -300;// 发送日志时间

        //开发者模式 true: 开启 false: 关闭
        public bool openConsole { get { return DevelopmentModel != Environment.pro; } }//别改错行了 modify by qc 2020.7.9
        //public bool readDatabase = { get;set; }
        public bool readDatabase { get; set; } = Application.platform == RuntimePlatform.WindowsEditor ? true : false;

        public Dictionary<BattleType, List<RecordData>> recordDataDic = new Dictionary<BattleType, List<RecordData>>(); //所有战斗记录数据缓存

        //当前战斗配置信息
        public BattleConfig battleConfig { get; set; } //当前战斗配置
        public TplBattle battleTpl { get { return battleConfig.config.tplConfig; } } //当前战斗配置模板表
        public bool isBossLevel
        {
            get
            {
                if (battleConfig != null && battleTpl != null)
                    return battleConfig.config.tplConfig.type == 1;
                else
                    return false;
            }
        } //true为boss关

        //当前调试状态
        public bool DebugModel { get; set; }
        //当前选择队伍
        public int curTeamID = 1;
        //当前升级状态
        int m_curUpGradeType = 2;

        public int GameHour;//游戏时长
        /// <summary>
        /// 1=金币等级 2=潜能等级
        /// </summary>
        public int curUpGradeType
        {
            get { return m_curUpGradeType; }
            set { m_curUpGradeType = value; EventManager.Instance.RaiseEvent("BattleCommon_英雄卡更新_升级消耗"); }
        }
        int curUpGradeLevelindex = 0;
        int curUpGradePorencyindex = 0;
        //更新UpGradeIndex
        public void SetCurUpGradeIndex()
        {
            if (curUpGradeType == 1)
                curUpGradeLevelindex = (curUpGradeLevelindex + 1) % 5;
            else
                curUpGradePorencyindex = (curUpGradePorencyindex + 1) % 4;

            EventManager.Instance.RaiseEvent("BattleCommon_英雄卡更新_升级消耗");
        }

        //根据curUpGradeLevelindex设置决定升多少级
        public int GetCurUpGradeIndex(int _index = -1)
        {
            int type = _index == -1 ? curUpGradeType : _index;
            int index = type == 1 ? curUpGradeLevelindex : curUpGradePorencyindex;

            switch (index)
            {
                case 0:
                    return 1;
                case 1:
                    return 10;
                case 2:
                    return 25;
                case 3:
                    return 50;
                case 4:
                    return -1;
                default:
                    return 1;
            }
        }

        ///--------------------从UserData中开放的属性--------------------
        //创建存档时间
        public long startTiming { get { return userData.startTiming; } set { userData.startTiming = value; } }
        //本次登录时间
        public long curLoginTime { get { return userData.curLoginTime; } set { userData.curLoginTime = value; } }
        //上次登录时间
        public long lastLoginTime { get { return userData.lastLoginTime; } set { userData.lastLoginTime = value; } }

        public bool isFirstToday { get { return userData.isFirstToday; } set { userData.isFirstToday = value; } }
        //已转生次数.服务端化
        public int reNum { get { return userData.reNum; } }//set { userData.reNum = value; }
        //已转生的最大等级.服务端化
        public int ReChapter { get { return userData.reChapter; } }//set { userData.reChapter = value; }
        //已转生关卡id.服务端化
        public int ReLevel { get { return userData.reLevel; } }//set { userData.reLevel = value; } 
        //玩家名称
        public string userName { get { return userData.name; } set { userData.name = value; } }
        //用户id
        public int userId { get { return userData.userId; } set { userData.userId = value; } }

        public string token { get { return userData.token; } set { userData.token = value; } }

        public bool opComplete { get { return userData.opComplete; } set { userData.opComplete = value; } }

        public int changeNameCount { get { return userData.changeNameCount; } set { userData.changeNameCount = value; } }
        //用户icon
        public int userIcon { get { return userData.userIcon == 0 ? 207 : userData.userIcon; } set { userData.userIcon = value; } }
        //用户头像框
        public int userIconB { get { return userData.userIconB == 0 ? 6100 : userData.userIconB; } set { userData.userIconB = value; } }
        //神力结晶.服务端化 (当前叫做钻石)
        public long sacredCrystal { get { return userData.sacredCrystal; } set { userData.sacredCrystal = value; EventManager.Instance.RaiseEvent("更新钻石显示"); } }
        //代金券
        public long coupon { get { return userData.coupon; } set { userData.coupon = value; } }
        //魔法石
        private long _magicStone;
        public long magicStone { get { return userData.magicStone; } set { userData.magicStone = value; EventManager.Instance.RaiseEvent("更新魔法石显示"); EventManager.Instance.RaiseEvent("更新左下角提示特效"); } }
        //潜能经验.服务端化
        public double _reExp;
        public double reExp_pool;

        public int dailyFreeCD = 0;

        private int _currentActionPoint;
        public int currentActionPoint { get { return _currentActionPoint; } set { _currentActionPoint = value; EventManager.Instance.RaiseEvent("更新行动力"); } }//当前行动力
        public int costActionPoint;//累计消耗的行动力
        public int actionPointBuyCount;//今日购买行动力次数
        public double reExp
        {
            get { return _reExp + reExp_pool; }
            set
            {
                _reExp = value;
                Debug.Log(string.Format("<color=#00B1FF>修改经验至:{0}+{1}</color>", _reExp, reExp_pool));
                EventManager.Instance.RaiseEvent("更新潜能经验显示");
                EventManager.Instance.RaiseEvent("更新科技界面小红点");
            }
        }

        //心灵之火
        private double _innerFire;
        public double innerFire { get { return userData.innerFire; } set { userData.innerFire = value; EventManager.Instance.RaiseEvent("更新心灵之火"); } }
        //public float innerFireSpeed;
        private long _luckyStone;
        //
        int m_vigor;
        public int vigor { get { return m_vigor; } set { m_vigor = value; EventManager.Instance.RaiseEvent("更新精力显示"); } }
        //幸运币
        public long luckyStone { get { return userData.luckyStone; } set { userData.luckyStone = value; EventManager.Instance.RaiseEvent("更新幸运币"); } }
        //迷宫硬币
        public long mazeCoin { get { return userData.mazeCoin; } set { userData.mazeCoin = value; EventManager.Instance.RaiseEvent("更新迷宫硬币"); } }
        //炼金粉尘
        public long ManaDust { get { return userData.ManaDust; } set { userData.ManaDust = value; EventManager.Instance.RaiseEvent("修改法力之尘"); } }
        //荣耀积分
        public long honorPoint { get { return userData.honorPoint; } set { userData.honorPoint = value; EventManager.Instance.RaiseEvent("修改荣耀积分"); } }
        //绝境徽章
        public long fortressPoint { get { return userData.fortressPoint; } set { userData.fortressPoint = value; EventManager.Instance.RaiseEvent("修改绝境徽章"); } }
        //公会币
        public long guildCoin { get { return userData.guildCoin; } set { userData.guildCoin = value; EventManager.Instance.RaiseEvent("修改公会币"); } }
        //强化石
        public long upgradeStone { get { return userData.upgradeStone; } set { userData.upgradeStone = value; EventManager.Instance.RaiseEvent("修改强化石"); } }
        //强化结晶
        public long upgradeCrystal { get { return userData.upgradeCrystal; } set { userData.upgradeCrystal = value; EventManager.Instance.RaiseEvent("修改强化结晶"); } }
        //阅历
        public long experience { get { return userData.experience; } set { userData.experience = value; EventManager.Instance.RaiseEvent("修改阅历"); } }
        //书等级
        public TplBookLevel bookLevel { get { return TplManager.Instance.GetTplBookLevelByExp(bookExp); } set { } }
        public TplBookLevel lastLevel;
        public TplBookLevel nextLevel;
        //书经验.服务端化
        public int bookExp { get { return userData.bookExp; } set { userData.lastExp = bookExp; userData.bookExp = value; EventManager.Instance.RaiseEvent("增加主线任务进度", new ArrayList() { Type_MainTaskID.灵魂等级提升1级, 0, bookLevel.level }); } }// CheckBookLevel(userData.lastExp); 更新玩家等级移动至服务端

        public int etenelNum { get { return userData.eternelNum; } set { userData.eternelNum = value; } }
        //挂机体力
        public int autoEarningsVigor = 1000;
        //挂机收益
        public double autoEarningsMaxTime { get { return 8 * 60; } } //挂机收益最大时间，单位 min
        public DateTime autoEarningsLastTime { get { return new DateTime(userData.autoEarningsLastTime); } set { userData.autoEarningsLastTime = value.Ticks; } }
        public DateTime quickHangUpLastTime { get { return new DateTime(userData.quickHangUpLastTime); } set { userData.quickHangUpLastTime = value.Ticks; } }
        //背包信息
        public Dictionary<long, thrift.sts.Equipment> equipmentDataDic = new Dictionary<long, thrift.sts.Equipment>();
        //材料字典 <tid,data>
        public Dictionary<int, thrift.sts.Item> materialDataDic = new Dictionary<int, thrift.sts.Item>();
        public Dictionary<int, thrift.sts.Item> consumableDataDic = new Dictionary<int, thrift.sts.Item>();
        public Dictionary<int, thrift.sts.Item> questsDataDic = new Dictionary<int, thrift.sts.Item>();
        public List<SealEquipmentData> sealEquipmentDataList { get; set; }
        //资源获取加成
        public AdditionData Addition { get { return userData.addition; } set { userData.addition = value; } }
        //转生.服务端化
        public double reGold { get { return userData.addition.reGold; } }//转生金币加成  set { userData.reGold = value; }
        //商店记录.服务端化
        public long lastCargoDataSaveTime { get { return userData.lastCargoDataSaveTime; } set { userData.lastCargoDataSaveTime = value; } }
        public List<CargoData> cargoDataList { get { return userData.cargoDataList; } set { userData.cargoDataList = value; } }
        //英雄召唤信息
        public int 总抽卡数 { get { return userData.总抽卡数; } set { userData.总抽卡数 = value; } }
        public int 抽卡保底次数 { get { return userData.抽卡保底次数; } set { userData.抽卡保底次数 = value; } }
        //public int heroUD { get { userData.heroUD += 1; return userData.heroUD; } }//作为英雄识别码使用，每次取用时自增，确保不会取到重复值
        public List<int> lastHadHeroList = new List<int>();
        public List<int> hadHeroList { get { return userData.hadHeroList; } set { userData.hadHeroList = value; } }

        public List<int> playerIconB { get { return userData.playerIconB; } set { userData.playerIconB = value; } }

        public List<AchievementData> achievementDataList { get { return userData.achievementDataList; } set { userData.achievementDataList = value; } }
        //天赋
        public List<thrift.sts.PlayerTalentData> playerTalentDataList = new List<PlayerTalentData>();
        //主线任务获得id
        public List<MainTask> mainTaskIDList = new List<MainTask>();
        //每个任务完成的等级、进度、就是第一个任务完成了第一阶段，maintaskcountidlist[0]=1;
        public List<int> mainTaskCountIDList { get { return userData.mainTaskCountIDList; } set { userData.mainTaskCountIDList = value; } }
        //悬赏任务
        public thrift.sts.RewardTaskData rewardTaskList;

        public int taskDbid { get { return userData.taskDbid; } set { userData.taskDbid = value; SaveDataManager.Instance.Save(); } }

        public List<int> checkList = new List<int>();
        public int checkDay;//登录的第几天
        //魔法研究列表
        public List<MagicResearchData> magicResearchList { get { return userData.magicResearchList; } set { userData.magicResearchList = value; } }
        //魔法研究槽位列表
        public List<MagicResearchSlotData> magicResearchSlotList { get { return userData.magicSlotList; } set { userData.magicSlotList = value; } }
        //日常任务
        public List<thrift.sts.DailyTaskData> dailyTaskDatas;
        //日常任务活跃度
        public DailyTaskActive dailyTaskActiveData;
        //日常任务活跃度
        public long dailyTaskRefreshTime { get { return userData.dailyTaskRefreshTime; } set { userData.dailyTaskRefreshTime = value; } }
        public long rewardTaskRefreshTime { get { return userData.rewardTaskRefreshTime; } set { userData.rewardTaskRefreshTime = value; } }
        //转生时间
        public long reincarnationRefreshTime { get { return userData.reincarnationRefreshTime; } set { userData.reincarnationRefreshTime = value; } }
        public int reincaCount { get { return userData.reincaCount; } set { userData.reincaCount = value; } }

        //Boss关自动释放大招
        public bool bossLevelAutoSkill { get { return userData.bossLevelAutoSkill; } set { userData.bossLevelAutoSkill = value; } }
        //public int bossLevelAutoSkillToInt { get { return bossLevelAutoSkill ? 1 : 0; } } //未使用过

        ///--------------------从TempData中开放的属性--------------------
        //创建时间
        public long startTiming_temp { get { return tempData.startTiming; } set { tempData.startTiming = value; } }
        //基础资源
        public double gold { get { return userData.gold; } set { userData.gold = value; EventManager.Instance.RaiseEvent("更新金币显示");/*EventManager.Instance.RaiseEvent("更新科技栏");*/ } }
        //public BigInteger gold_bigi { get { return tempData.gold_bigi; } set { tempData.gold_bigi = value; /*Debug.Log($"<color=yellow>金币剩余：{data.gold }</color>");*/ } }
        //水晶 服务端化
        public long crystal { get { return userData.crystal; } set { userData.crystal = value; EventManager.Instance.RaiseEvent("更新水晶显示"); /*Debug.Log($"<color=aqua>水晶剩余： {userData.crystal}</color>")*/; } }
        public float exp { get { return tempData.exp; } set { tempData.exp = value; Tools.Print($"<color=lime>经验值剩余：{tempData.exp}</color>", Tools.Programmer.Linus); } }
        public float expMax { get { return tempData.expMax; } }

        //科技信息
        public ScienceData scienceData { get { return userData.scienceData; } set { userData.scienceData = value; } }
        public double autoSpawnNum;//自动生产金币数量
        public double hitSpawnNum;//击中怪物金币数量
        public float hitCritNum;//暴击几率
        public float hitCritbonuNum;//暴击加成
        public long OfflineEarnings;//离线收益
        //秘宝信息
        public TreasuresData treasureData { get { return userData.treasureData; } set { userData.treasureData = value; } }
        //加成记录
        public List<IncreaseData> increaseDataList { get { return tempData.increaseDataList; } set { tempData.increaseDataList = value; } }
        //装配技能
        public int defaultSkill { get { return userData.defaultSkill; } set { userData.defaultSkill = value; } }
        public int[] skillData { get { return userData.skillData; } set { userData.skillData = value; } }
        public float[] skillCD = new float[4];
        //商店信息
        public List<BuyNumData> shopBuyNum { get { return tempData.shopBuyNum; } set { tempData.shopBuyNum = value; } }
        //

        private UI_SummonHeroModel _summonHeroModel;
        private UI_HeroInfoModel _heroInfoModel;
        private UI_RewardTaskModel _rewardTaskModel;

        //玩家状态，用于在登录时检测
        public PlayerStatus playerStatus { get { return userData.playerStatus; } set { userData.playerStatus = value; } }
        //玩家当前所在的功能界面，运行时生成并动态修改
        public PlayerPlace playerPlace = PlayerPlace.battle;
        //战斗类型 1 巢穴探索 2远征 3新的巢穴探索 4讨伐
        public int curBattleType = 1;
        ///下面是地图的关卡数据
        //地区列表
        //public Map_Model_List map_Model_List = null;
        //最高关卡
        public Map_Model top_map_model { get { return MapDatamanager.instance.GetTopUnlockLocationTpl(); } }
        //当前所在的关卡
        public Map_Model Map_Model { get { return MapDatamanager.instance.Return_Cur_Map_Model(); } }
        ///剧情相关
        public NodeDataStoryList nodeData;
        public NodeDataStory nodeNext;
        public NodeDataStory node;



        ///主线章节
        //Data数据，下方所有数据均根据其中的 Chapter和Level 生成。所以在修改进度时，这里是实际需要进行操作位置
        public BasicPlotData basicPlotData;
        //当前战斗的章节
        public TplBasicPlotChapter curBasicPlotChapter;
        //当前战斗的关卡
        public TplBattle curBasicPlotBattle { get { return TplManager.Instance.GetBattleByIDTest(curBasicPlotBattleID); } }
        //当前关卡的Id，在执行LoadData方法时会被修改
        public int curBasicPlotBattleID;
        //当前战斗的探索度
        public float curBasicPlotProgress;
        //当前关卡位于章节中的位置
        public int curBasicPlotLevel { get { return basicPlotData.PassInfo.CurLevel; } set { basicPlotData.PassInfo.CurLevel = value; } }

        public DateTime storyBattleStartTime;
        //当前关卡对应的BossId
        public int curBasicPlotCommonID
        {
            get
            {
                if (curBasicPlotChapter != null && curBasicPlotLevel < curBasicPlotChapter.commonId.Length)
                {
                    return curBasicPlotChapter.commonId[curBasicPlotLevel];
                }
                else
                    return 0;
            }
        }

        public bool isMazeBattle = false;
        public int curBasicPlotBossID { get { return curBasicPlotChapter.bossId[curBasicPlotLevel]; } }


        //最大关卡数 登陆更新后 客户端通关计算后提交给服务端持久化
        public int MaxChapter { get { return basicPlotData.PassInfo.TopChapter; } set { basicPlotData.PassInfo.TopChapter = value; } }//set { userData.maxChapter = value; }
        public int MaxLevel { get { return basicPlotData.PassInfo.TopLevel; } set { basicPlotData.PassInfo.TopLevel = value; } }//转生金币加成  set { userData.maxLevel = value; }
        public int MaxStageLevel = 0;//转生金币加成 set { userData.maxLevel = value; }

        public TplBasicPlotChapter maxBasicPlotChapter;
        public int maxBasicPlotBattleID;
        public TplBattle maxBasicPlotBattle { get { return TplManager.Instance.GetBattleByIDTest(maxBasicPlotBattleID); } }

        //自动推进
        public bool isAutoPush { get { return basicPlotData.AutoPush; } set { basicPlotData.AutoPush = value; EventManager.Instance.RaiseEvent("更新主线功能玩家设置"); } }

        //(爵位)
        public int taskLevel { get { return userData.taskLevel; } set { userData.taskLevel = value; } }
        public List<thrift.sts.GuideTaskData> guideTaskDataList;

        //遣散
        public bool isAutoBack { get { return userData.isAutoBack; } set { userData.isAutoBack = value; } }//是否自动遣散


        //试炼迷宫
        public bool isMazeTip = false;//不再提示
        public int perfectChapter { get { return userData.perfectChapter; } set { userData.perfectChapter = value; } }

        //竞技场相关数据
        public ArenaData arenaData = new ArenaData();



        //战斗加速剩余时间(ms 转换为s需要除1000)
        public long BattleAccRemainTime = 0;

        //是否为战斗加速剩余免费时间
        public bool BattleAccIsFree = false;

        //普通月卡剩余时间(ms 转换为s需要除1000)
        public long normalMonthRemainTime = 0;
        //超级月卡剩余时间(ms 转换为s需要除1000)
        public long superMonthRemainTime = 0;

        public string guildName = "";//公会名
        public bool guildCheck;

        public RedPointSystem rps = new RedPointSystem();

        //(远征)
        //当前远征信息
        public ExpeditionData expeditionData { get { return tempData.expeditionData; } set { tempData.expeditionData = value; } }
        //当前远征选定章节信息
        public TplExpeditionChapter expeditionChapter { get { return TplManager.Instance.GetExpeditionChapterById(expeditionData.chapterID); } }
        //当前远征战斗点位信息
        public TplExpeditionPlace expeditionPlace { get { return TplManager.Instance.GetExpeditionPlaceById(expeditionData.placeID); } }
        //当前远征战斗Id
        public int curExpeditionBattleId { get { return expeditionPlace.battleID[expeditionData.levelID]; } }
        //
        public TplExpeditionBattle expeditionBattle { get { return TplManager.Instance.GetExpeditionBattleByID(curExpeditionBattleId); } }
        //当前章节战斗配置信息
        public List<TplExpeditionBattle> expeditionBattleList { get { return TplManager.Instance.GetExpeditionBattleList(); } }
        //当前战斗英雄剩余生命
        public List<BattleHeroData> battleHeroData { get { return userData.battleHeroData; } set { userData.battleHeroData = value; } }
        //关卡掉落物
        public AwardData awardList { get { return tempData.awardList; } set { tempData.awardList = value; } }
        //转生掉落物
        public AwardData_Round awardData_Round { get { return userData.awardData_Round; } set { userData.awardData_Round = value; } }

        public List<HeroSkillRespon> allHeroSkills;

        //挂机宝箱预览数据
        public PreHangUpReward autoEarningsData;

        public HideBuildingData hideBuildData = new HideBuildingData();

        //UI界面缓存数据
        private UI_WorkshopCtrl _workshopCtrl;
        public UI_WorkshopCtrl workshopCtrl
        {
            get
            {
                if (_workshopCtrl == null)
                {
                    _workshopCtrl = UIManager.Instance.GetUIByUIType<UI_WorkshopCtrl>(UIModel.UI_WorkshopPanel);
                }
                return _workshopCtrl;
            }
        }

        //----------已取消功能----------
        //远征
        public float supplies { get { return tempData.supplies; } set { tempData.supplies = value; } }
        public float maxSupplies { get { return tempData.maxSupplies; } set { tempData.maxSupplies = value; } }
        //临时背包及战斗背包
        public int battlePackCapacity { get { return tempData.battlePackCapacity; } set { tempData.battlePackCapacity = value; } }
        public List<Item> casualPackDataList { get { return tempData.casualPackDataList; } set { tempData.casualPackDataList = value; } }
        public List<Item> battlePackDataList { get { return tempData.battlePackDataList; } set { tempData.battlePackDataList = value; } }
        //爬塔
        public long towerCoin { get { return tempData.towerCoin; } set { tempData.towerCoin = value; } }
        public int towerKey { get { return tempData.towerKey; } set { tempData.towerKey = value; } }
        //生活技能
        public string lastLifeSkillTime { get { return tempData.lastLifeSkillTime; } set { tempData.lastLifeSkillTime = value; } }
        public List<LifeSkillData> lifeSkillDataList { get { return tempData.lifeSkillDataList; } set { tempData.lifeSkillDataList = value; } }
        //
        public List<TrialFloorData> trialFloorData { get { return tempData.trialFloorData; } set { tempData.trialFloorData = value; } }


        //使用get方法避免初始化m_heroInfoModel 构造中循环调用DataMangaer自己
        public UI_SummonHeroModel summonHeroModel
        {
            get
            {
                if (_summonHeroModel == null)
                    _summonHeroModel = new UI_SummonHeroModel();
                return _summonHeroModel;
            }
        }
        public UI_HeroInfoModel heroInfoModel
        {
            get
            {
                if (_heroInfoModel == null)
                    _heroInfoModel = new UI_HeroInfoModel();
                return _heroInfoModel;
            }
        }

        //背包数据模块
        public static UI_InventoryModel InventoryModel { get { return Instance.inventoryModel; } }
        private UI_InventoryModel inventoryModel = new UI_InventoryModel();

        public UI_RewardTaskModel rewardTaskModel
        {
            get
            {
                if (_rewardTaskModel == null)
                    _rewardTaskModel = new UI_RewardTaskModel();
                return _rewardTaskModel;
            }
        }



        //判断总英雄的数量是否大于当前上阵英雄
        public bool GetCurrentExistsHeros(int count)
        {
            HashSet<int> heroList = new HashSet<int>();
            foreach (var v in heroDataList)
            {
                heroList.Add(v.Tid);
                if (heroList.Count > count)
                    return true;
            }
            return heroList.Count > count;
        }

        //当前英雄唯一数量大于等于可上阵数?
        public int GetNotInTeamCount()
        {
            HashSet<int> heroList = new HashSet<int>();
            foreach (var v in heroDataList)
            {
                heroList.Add(v.Tid);
            }
            var hero = FormationModel.GetTeamInfoByType(FormationTypes.basicPlot).teamHeros;
            foreach (var v in hero)
            {
                if (v != null)
                {
                    heroList.Remove(v.id);
                }
            }
            return heroList.Count;
        }


        //================================================================================
        //================================================================================
        //==================================英雄信息部分===================================
        //================================================================================
        //================================================================================
        /// <summary>
        /// 全部英雄存档信息 所有数据修改在LoadData()后是会被保留的
        /// </summary>
        List<thrift.sts.HeroData> m_heroDataList = new List<thrift.sts.HeroData>();
        public List<thrift.sts.HeroData> heroDataList { get { return m_heroDataList; } }
        /// <summary>
        /// 全部英雄信息 所有数据在LoadData()时依照heroDataList重新生成
        /// </summary>
        public List<Hero> heroInfoList = new List<Hero>();
        /// <summary>
        /// 
        /// </summary>
        public List<HeroDamage> heroDamage { get { return tempData.heroDamageList; } private set { tempData.heroDamageList = value; } }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="_data"></param>
        public Hero ResponUpdateHerodata(HeroData _data)
        {
            for (int i = 0; i < heroDataList.Count; i++)
            {
                var data = heroDataList[i];
                if (data.Udid == _data.Udid)
                {
                    heroDataList[i] = _data;
                    for (int j = 0; j < heroInfoList.Count; j++)
                    {
                        var info = heroInfoList[j];
                        if (info.udid == _data.Udid)
                        {
                            var tpl = TplManager.Instance.GetHeroByID(_data.Tid);
                            if (_data != null && tpl != null)
                            {
                                heroInfoList[j] = new Hero(tpl, _data);
                                //编队信息更新
                                FormationModel.Rpc_HeroTeamInfoUpdate(heroInfoList[j]);
                                return heroInfoList[j];
                            }
                        }
                    }
                    break;
                }
            }
            return null;
        }

        public double GetTeamHeroEntireHp()
        {
            double entireHp = 0;
            var heroInfoList = FormationModel.GetTeamInfoByType(FormationTypes.basicPlot);
            foreach (var hero in heroInfoList.teamHeros)
            {
                if (hero != null)
                {
                    entireHp += hero.totalAttribute.maxHp;
                    //Debug.Log(string.Format("当前英雄UDID:{0} 当前英雄血量:{1}", hero.udid, hero.totalAttribute.maxHp));
                }
            }
            return entireHp;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="_udid"></param>
        //public void HeroInfoListLoadData(long _udid)
        //{
        //    for (int i = 0; i < heroInfoList.Count; i++)
        //    {
        //        var info = heroInfoList[i];
        //        if (info.udid == _udid)
        //        {
        //            HeroData data = null;
        //            foreach (var tardata in heroDataList)
        //                if (tardata.Udid == _udid)
        //                    data = tardata;
        //            var tpl = TplManager.Instance.GetHeroByID(info.id);
        //            if (data != null && tpl != null)
        //                heroInfoList[i] = new Hero(tpl, data);
        //            break;
        //        }
        //    }
        //}
        //void 
        /// <summary>
        /// 根据heroDataList重新加载heroInfoList数据
        /// </summary>
        /// <returns></returns>
        public List<Hero> HeroInfoListLoadData(bool _sort = false)
        {
            //清空英雄列表
            heroInfoList.Clear();
            //
            foreach (var data in heroDataList)
            {
                //if(hero.Udid==44)
                //Debug.LogError($"初始化英雄列表{hero.Tid} : {hero.Udid}:{hero.Level}");
                //如果模板中加载不到该英雄ID就不添加进英雄列表
                var tpl = TplManager.Instance.GetHeroByID(data.Tid);
                //TplManager.Instance.ReadPlayerTalent();
                if (tpl != null)
                    heroInfoList.Add(new Hero(tpl, data));
            }
            //进行默认排序
            if (_sort)
            {
                heroInfoLose = true;
                SortHeroInfoList();
            }
            else
            {
                heroInfoLose = true;
            }
            //heroList执行了清理重组，HeroTeamInfo里的元素丢失了引用，所以要在每次执行loadData时对HeroTeamInfoList也进行重组
            FormationModel.GetAllHeroTeamData();
            //
            return heroInfoList;
        }
        /// <summary>
        /// 用于记录两次排序间有没有进行过LoadData
        /// </summary>
        bool heroInfoLose;
        /// <summary>
        /// 默认排序   
        /// 稀有度＞潜能等级＞英雄品阶＞英雄ID顺序排序
        /// </summary>
        public void SortHeroInfoList()
        {
            if (!heroInfoLose) return;
            heroInfoLose = false;

            for (int i = 0; i < heroInfoList.Count - 1; i++)
            {
                for (int j = 0; j < heroInfoList.Count - 1 - i; j++)
                {
                    if (!SwapeHeroData(j, heroInfoList[j].quality < heroInfoList[j + 1].quality))//稀有度排序
                    {
                        if (heroInfoList[j].quality == heroInfoList[j + 1].quality)//潜能排序
                        {
                            if (!SwapeHeroData(j, heroInfoList[j].potency < heroInfoList[j + 1].potency))
                            {
                                if (heroInfoList[j].potency == heroInfoList[j + 1].potency)
                                {
                                    int tplCur = heroInfoList[j].tpl.grade;
                                    int tplTar = heroInfoList[j + 1].tpl.grade;
                                    if (!SwapeHeroData(j, tplCur < tplTar))//品阶排序
                                    {
                                        if (tplCur == tplTar)
                                        {
                                            //ID排序
                                            SwapeHeroData(j, heroInfoList[j].id > heroInfoList[j + 1].id);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="j"></param>
        /// <param name="bCondition"></param>
        /// <returns></returns>
        private bool SwapeHeroData(int j, bool bCondition)
        {
            if (bCondition)
            {
                var tempData = heroInfoList[j + 1];
                heroInfoList[j + 1] = heroInfoList[j];
                heroInfoList[j] = tempData;
            }
            return bCondition;
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="_dataList"></param>
        public void CallBack_AddNewHeroData(List<HeroData> _dataList)
        {
            foreach (var data in _dataList)
            {
                if (data != null)
                {
                    m_heroDataList.Add(data);
                    heroDamage.Add(new HeroDamage { udid = data.Udid, makeDamage = 0 });
                    DealTopLv(data.Udid, data.Potency);
                }
            }
        }
        /// <summary>
        /// 根据udid获取英雄
        /// </summary>
        /// <param name="_udid"></param>
        /// <returns></returns>
        public UI_HeroInfoModel.Hero GetHeroInfoByUdid(long _udid)
        {
            if (_udid <= 0)
                return null;
            foreach (var hero in heroInfoList)
            {
                if (hero.udid == _udid)
                {
                    return hero;
                }
            }
            return null;
        }
        /// <summary>
        /// 对英雄伤害信息进行计算
        /// </summary>
        /// <param name="_udid"></param>
        /// <param name="_damage"></param>
        public void SetHeroDamage(long _udid, long _damage)
        {
            foreach (var hero in heroDamage)
            {
                if (hero.udid == _udid)
                {
                    hero.makeDamage += _damage;
                    break;
                }
            }
            //SaveDataManager.Instance.Save();
        }
        /// <summary>
        /// 计算当前英雄列表属性评分
        /// </summary>
        /// <param name="heroArray"></param>
        /// <returns></returns>
        public long GetHeroArrayCE(Hero[] heroArray)
        {
            long ce = 0;
            foreach (var hero in heroArray)
            {
                if (hero == null)
                    continue;
                ce += GetHeroCE(hero);
            }
            return ce;
        }

        /// <summary>
        /// 获取英雄战斗力
        /// </summary>
        /// <param name="attribute"></param>
        /// <returns></returns>
        public long GetHeroCE(Hero hero = null)
        {
            //获取当前英雄基础属性
            //当前英雄属性
            EquipScoreAttribute heroScoreAttribute = new EquipScoreAttribute(hero.selfAttribute);
            //装备基础属性分数
            float equipQualityScore = 0;
            foreach (var v in hero.equipments)
            {
                if (v != null)
                {
                    equipQualityScore += v.GetEquipQualityScore();
                }
            }
            //计算全装备属性
            EquipScoreAttribute equipScoreAttribute = new EquipScoreAttribute(hero.equipAttribute);
            //计算最终战斗力
            EquipScoreAttribute allAttribute = heroScoreAttribute + equipScoreAttribute;
            long finCE = (long)(CombatScoreTool.伤害评分(allAttribute, hero) * CombatScoreTool.生存力评分(allAttribute) / 10000 + equipQualityScore);
            return finCE;
        }

        //计算怪物评分属性
        public long GetMonsterCE(Attribute totalAttribute)
        {
            EquipScoreAttribute monsterAttribute = new EquipScoreAttribute(totalAttribute);
            return (long)(CombatScoreTool.伤害评分(monsterAttribute, null) * CombatScoreTool.生存力评分(monsterAttribute) / 10000);
        }


        //==================================编队信息部分===================================
        //临时存储竞技场敌人信息
        public Hero[] opponentBattleTeamHeros { get; set; }

        public List<SupportHeroData> opponentSupportTeamHeros { get; set; }

        //存储所有改变技能的英雄Udid，用完需要及时清除相关数据
        public List<long> allChangeSkillHeroTid = new List<long>();

        //竞技场防守阵容编队战斗力
        public double arenaGuardCE = 0;


        /// <summary>
        /// 竞技场对手英雄列表初始化
        /// </summary>
        /// <param name="targetTeamData"></param>
        public void InitOpponentBattleTeamHeros(TargetTeamData targetTeamData)
        {
            opponentBattleTeamHeros = new Hero[] { null, null, null, null, null, null };
            opponentSupportTeamHeros = targetTeamData.TargetSupportHeroData;
            List<long> opponentHeroFormationId = new List<long>();
            if (arenaData.arenaRespon.OpponentInfos[arenaData.opponentIndex].Heros != null)
            {
                opponentHeroFormationId = arenaData.arenaRespon.OpponentInfos[arenaData.opponentIndex].Heros.TeamHeroUdids;
            }
            if (targetTeamData != null && targetTeamData.Herolist != null && targetTeamData.Herolist.Count > 0 && opponentHeroFormationId.Count > 0)
            {
                int targetIndex = 0;
                for (int i = 0; i < opponentHeroFormationId.Count; i++)
                {
                    if (targetIndex < targetTeamData.Herolist.Count) //判断是否越界
                    {
                        if (opponentHeroFormationId[i] == 0)
                            continue;

                        List<Equipment> equipments = new List<Equipment>();
                        if (targetTeamData.Equips != null && targetTeamData.Equips.Count > 0)
                        {
                            Equipment _equip;
                            for (int j = 0; j < targetTeamData.Equips.Count; j++)
                            {
                                _equip = inventoryModel.OnAddEquipment(targetTeamData.Equips[j], false);
                                if (_equip != null && _equip.equippedHeroID.Equals(targetTeamData.Herolist[targetIndex].Udid))
                                {
                                    equipments.Add(_equip);
                                }
                            }
                        }

                        Sts.Model.TplHero tpl = TplManager.Instance.GetHeroByID(targetTeamData.Herolist[targetIndex].Tid);
                        if (tpl != null)
                        {
                            opponentBattleTeamHeros[i] = new Hero(tpl, targetTeamData.Herolist[targetIndex], equipments.ToArray());
                        }
                        else
                        {
                            Debug.Log("Tpl 读表错误 Hero Tid:" + targetTeamData.Herolist[targetIndex].Tid);
                        }
                        targetIndex++;
                    }
                }
            }
            else
            {
                Debug.LogError("竞技场敌人信息为空");
            }
        }


        /// <summary>
        /// 外部方法 查询某个 材料/消耗品数量
        /// </summary>
        /// <param name="tid"></param>
        /// <param name="type"></param>
        /// <returns></returns>
        public int GetItemAmount(int tid, Item.Type type = Item.Type.Material)
        {
            int _amout = 0;
            switch (type)
            {
                case Item.Type.Material:
                    {
                        thrift.sts.Item item = GetMaterialDataByTid(tid);
                        if (item != null)
                            _amout = item.Amount;
                    }
                    break;
                case Item.Type.Consumable:
                    {
                        thrift.sts.Item item = GetConsumableDataByTid(tid);
                        if (item != null)
                            _amout = item.Amount;
                    }
                    break;
                case Item.Type.Quests:
                    {
                        thrift.sts.Item item = GetQuestsDataByTid(tid);
                        if (item != null)
                            _amout = item.Amount;
                    }
                    break;
                default:
                    Debug.LogError("GetItemAmout 类型错误！ " + type);
                    break;
            }
            return _amout;
        }



        public thrift.sts.Item GetItemDataByItem(Item item)
        {
            switch (item.type)
            {
                case Item.Type.Material:
                    return GetMaterialDataByTid(item.tid);
                case Item.Type.Consumable:
                    return GetConsumableDataByTid(item.tid);
                case Item.Type.Quests:
                    return GetQuestsDataByTid(item.tid);
            }
            return null;
        }

        public thrift.sts.Item GetConsumableDataByTid(int tid)
        {
            if (consumableDataDic.ContainsKey(tid))
                return consumableDataDic[tid];
            else
                return null;
        }

        public thrift.sts.Item GetQuestsDataByTid(int tid)
        {
            if (questsDataDic.ContainsKey(tid))
                return questsDataDic[tid];
            else
                return null;
        }



        public thrift.sts.Item GetMaterialDataByTid(int tid)
        {
            if (materialDataDic.ContainsKey(tid))
                return materialDataDic[tid];
            else
                return null;
        }

        //根据服务端返回更新数据
        public void UpdateItem(thrift.sts.Item item)
        {
            //Debug.Log("Update Item " + item.Tid);
            switch ((Item.Type)item.Type)
            {
                case Item.Type.Material:
                    {
                        //物品0剩余.移除
                        if (item.Amount <= 0)
                            materialDataDic.Remove(item.Tid);
                        else
                            materialDataDic[item.Tid] = item;
                    }
                    break;
                case Item.Type.Consumable:
                    {
                        //物品0剩余.移除
                        if (item.Amount <= 0)
                            consumableDataDic.Remove(item.Tid);
                        else
                            consumableDataDic[item.Tid] = item;
                    }
                    break;
                case Item.Type.Quests:
                    {
                        //物品0剩余.移除
                        if (item.Amount <= 0)
                            questsDataDic.Remove(item.Tid);
                        else
                            questsDataDic[item.Tid] = item;
                    }
                    break;
                default:
                    Debug.LogError("错误的物品类型 " + item.Type);
                    break;
            }
        }


        public void GetCargoDataListCallback(List<thrift.sts.CargoData> cargoList)
        {
            Debug.Log("获取商品列表callback " + cargoList.Count);
            //根据网络通讯结果处理后续流程

            //cargoDataList.Clear();
            foreach (var cargo in cargoList)
            {
                CargoData cargoData = new CargoData(cargo.Tid);
                cargoData.setCargoData(cargo);
                cargoDataList.Add(cargoData);
            }

        }

        //远程调用 取得商品列表
        public void RpcGetCargoDataList()
        {
            if (cargoDataList.Count == 0)//防止每一关都去获取商品列表
            {
                List<thrift.sts.CargoData> cargoList = null;
                //等待网络通信协程
                RpcServer.Instance.netServerControll.CallRpcRemoteThread(
                    () => { cargoList = RpcServer.Instance.Client.GetCargoList(userId); },
                    () => { GetCargoDataListCallback(cargoList); });
            }
            else
            {
                if (cargoDataList.Count < TplManager.Instance.GetCargoList().Count)
                {
                    //客户端临时留用清空cargoDataList 重新根据模板表初始化
                    cargoDataList.Clear();
                    foreach (var tpl in TplManager.Instance.GetCargoList())
                        cargoDataList.Add(new CargoData(tpl.id));
                }
            }

        }


        //存档校对
        public void CheckSaveData()
        {
            //玩家等级初始化
            CheckBookLevel(bookExp);
            //英雄列表初始化 服务端话
            //if (heroDataList.Count == 0)
            //{
            //    HeroData heroFirst = new HeroData(207, heroUD);
            //    heroFirst.teamID = 1;
            //    heroFirst.teamSeat = 4;//初始阵位
            //    heroFirst.isPermanent = true;
            //    heroFirst.quality = 2;
            //    heroDataList.Add(heroFirst); //初始化第一个默认英雄 106
            //}
            //else
            //{
            //    bool isSeat = false;
            //    foreach (var item in heroDataList)
            //        if (item.teamID == 1 && item.teamSeat != 0)
            //            isSeat = true;
            //    if (!isSeat)
            //    {
            //        foreach (var item in heroDataList)
            //            if (item.id == 106)
            //            {
            //                item.teamID = 1;
            //                item.teamSeat = 4;//初始阵位
            //            }
            //    }
            //}
            //heroInfoModel.LoadData();

            //已有英雄信息 校对附加
            foreach (var data in heroDataList)
                if (!hadHeroList.Contains(data.Tid))
                    hadHeroList.Add(data.Tid);

            //背包初始化
            //if (equipmentCapacity < 27) equipmentCapacity = 27;
            //if (materialCapacity < 27) materialCapacity = 27;
            //if (consumableCapacity < 27) consumableCapacity = 27;
            //if (sealEquipmentCapacity < 27) sealEquipmentCapacity = 27;
            if (battlePackCapacity < 27) battlePackCapacity = 27;

            //商店信息初始化

            //服务端化 取得商场数据
            //if (cargoIndexList.Count < TplManager.Instance.GetCargoList().Count)
            //{
            //    foreach (var tpl in TplManager.Instance.GetCargoList())
            //        if (!cargoIndexList.Contains(tpl.id))
            //        {
            //            cargoDataList.Add(new CargoData(tpl.id));
            //            cargoIndexList.Add(tpl.id);
            //        }
            //}

            ///旧版巢穴探索初始化
            //ChapterData newData = null;
            //var chapterDataList = tempData.exploreChapterDataList;
            //var trialFloorDataList = tempData.trialFloorData;
            ////自动添加第一章
            //if (chapterDataList.Count == 0)
            //    chapterDataList.Add(new ChapterData(1));
            //foreach (var chapterData in chapterDataList)
            //{
            //    if (chapterData.curLevelID >= TplManager.Instance.GetExploreByID(chapterData.chapterID).battles.Length)
            //        newData = new ChapterData(chapterData.chapterID + 1);
            //}
            //if (newData != null)
            //{
            //    foreach (var chapterData in chapterDataList)
            //    {
            //        if (chapterData.chapterID == newData.chapterID)
            //            newData = null;
            //    }

            //    if (newData != null)
            //        chapterDataList.Add(newData);
            //}
            ///end

            ///基础探险初始化
            //无数据时自动添加第一章
            //if (userData.basicPlotData == null)
            //    userData.basicPlotData = new BasicPlotData();

            //BasicPlotDataUpdate();
            ///end 

            ///玩家技能（秘宝系统）初始化
            if (treasureData.treasureId.Count == 0)
            {
                TplTreasure tplTrea = TplManager.Instance.GetTreasure()[0];
                treasureData.Learn(tplTrea.id);
                treasureData.LevelUp(tplTrea.id);
                defaultSkill = (int)tplTrea.effectValue;
            }
            ///end

            ///挂机收益初始化
            //if (!autoEarningsData.inited)
            //{
            //    autoEarningsData.inited = true;
            //    autoEarningsData.lastTime = TimeManager.Instance.F_GetTimeToLong(-240);
            //    autoEarningsData.AutoEarningsList_curr[0] = 240 * GetAutoBookExpAddition();
            //    autoEarningsData.AutoEarningsList_curr[1] = 240;
            //    autoEarningsData.AutoEarningsList_curr[2] = 240 * GetAutoReExpSpeed();
            //    autoEarningsData.AutoEarningsList_curr[3] = 4;
            //    autoEarningsData.AutoEarningsList_type.Add(2);
            //    autoEarningsData.AutoEarningsList_item.Add(2013);
            //    autoEarningsData.AutoEarningsList_num.Add(8);
            //}
            ///
        }


        //加载章节存档信息
        public void BasicPlotDataUpdate(int _res = 0)//0=重置为小关，1=重置为boss
        {
            //根据
            curBasicPlotChapter = TplManager.Instance.GetBasicPlotChapterByIndex(basicPlotData.PassInfo.CurChapter);

            if (curBasicPlotChapter.battleType == 1)
            {
                if (_res == 1)
                {
                    int bossId = curBasicPlotChapter.bossId[curBasicPlotLevel];
                    if (bossId != 1)
                    {
                        curBasicPlotBattleID = bossId;
                    }
                    else
                    {
                        curBasicPlotBattleID = curBasicPlotChapter.commonId[curBasicPlotLevel];
                        Debug.LogError("目标关卡不包含Boss配置");
                    }
                }
                else
                {
                    curBasicPlotBattleID = curBasicPlotChapter.commonId[curBasicPlotLevel];
                }
            }
            else if (curBasicPlotChapter.battleType == 2)
            {
                //走主线剧情战流程
                curBasicPlotBattleID = curBasicPlotChapter.bossId[0];
                // Browsethestory.instance.battleCtrl.BeginStoryBattle(curBasicPlotChapter.bossId[0]);
            }

            //客户端初始状态归零  防止-1越界报错 by qc 2020/06/15
            if (MaxChapter < 0)
                MaxChapter = 0;
            MaxStageLevel = MaxLevel;
            if (MaxLevel < 0)
                MaxLevel = 0;
            maxBasicPlotChapter = TplManager.Instance.GetBasicPlotChapterByIndex(MaxChapter);
            //处理越界
            MaxLevel = Mathf.Min(MaxLevel, maxBasicPlotChapter.commonId.Length - 1);
            maxBasicPlotBattleID = maxBasicPlotChapter.commonId[MaxLevel];
        }

        //计算探索度进度条
        public float GetProgressPercent()
        {
            //如果当前探索度大于最大探索度则清至最大探索度
            if (curBasicPlotProgress > curBasicPlotBattle.maxProgress)
                curBasicPlotProgress = curBasicPlotBattle.maxProgress;
            //计算结果
            float percent = (float)(curBasicPlotProgress / curBasicPlotBattle.maxProgress);
            return percent;
        }

        //int[0] 事件id  int[1]事件对应宝箱和战斗的id
        //public List<int[]> curLevelChestList = new List<int[]>();
        //public List<int[]> curLevelBattleList = new List<int[]>();
        //public void LoadEventInfo()
        //{
        //    curLevelChestList.Clear();
        //    curLevelBattleList.Clear();
        //    if (curChapter == null) return;

        //    int eventID = 0;
        //    //foreach (var e in curChapter.tpl.eventList)
        //    //{
        //    //    eventID++;
        //    //    //载入宝箱
        //    //    if (e.type == TplExplore.Event.Type.Chest)
        //    //        curLevelChestList.Add(new int[2] { eventID, e.id });
        //    //    //载入战斗
        //    //    if (e.type == TplExplore.Event.Type.Battle)
        //    //        curLevelBattleList.Add(new int[2] { eventID, e.id });
        //    //}
        //}

        //更新书等级 由bookExp变化驱动 后续天赋点变化由服务端处理并直接更新userData中数据
        //升级bookLevel 和 Crystal 由客户端独自处理
        void CheckBookLevel(int _lastExp)
        {
            bookLevel = TplManager.Instance.GetTplBookLevelByExp(bookExp);
            lastLevel = TplManager.Instance.GetTplBookLevelByExp(_lastExp);
            nextLevel = TplManager.Instance.GetTplBookLevelByLevel(bookLevel.level + 1);
        }
        void CheckBookLevelUp(int _lastExp, List<CurrencyChanged> _currs, List<Item> _awards)
        {
            CheckBookLevel(_lastExp);

            int times = bookLevel.level - lastLevel.level;
            //for (int i = 1; i < times + 1; i++)
            //    reward += TplManager.Instance.GetTplBookLevelByLevel(lastLevel.level + i).reward;
            if (times > 0)
            {
                //UIGlobal.instance.SendBubble($"等级提升{lastLevel.level}=>{bookLevel.level}");
                int[] bookLvInfo = new int[] { userData.lastExp, userData.bookExp, lastLevel.level, bookLevel.level };
                if (UI_PlayerLevelUp.instance == null)
                {
                    UIManager.Instance.OpenUI(UIModel.UI_PlayerLvUp);
                }
                EventManager.Instance.RaiseEvent("准备播放book升级效果", new ArrayList() { bookLvInfo, _currs, _awards });
                //todo dashi 水晶发放服务端化
                //ChangeCrystal(reward);
                EventManager.Instance.RaiseEvent("AddAchievement", new ArrayList() { (int)70015, (float)times });
                LeaderSkillModel.VerifySkillUnlock(); //检测主角技能解锁
            }
            EventManager.Instance.RaiseEvent("增加主线任务进度", new ArrayList() { Type_MainTaskID.灵魂等级提升1级, 0, bookLevel.level });
            //EventManager.Instance.RaiseEvent("更新金币显示");
            //EventManager.Instance.RaiseEvent("更新法力之尘显示");
            //EventManager.Instance.RaiseEvent("更新书等级信息");
            //EventManager.Instance.RaiseEvent("更新英雄信息界面");
        }

        /// <summary>
        /// 获取最大关卡数 每一章的关卡数+ 当前章关卡 加起来的总和
        /// </summary>
        /// <returns></returns>
        public int GetMaxTotalLevel(int chapter = -1000, int level = -1000)
        {
            if (chapter == -1000)
            {
                chapter = MaxChapter;
                level = MaxLevel;
            }
            int total = 0;
            for (int i = 0; i < chapter; i++)
            {
                total += TplManager.Instance.GetBasicPlotChapterByIndex(i).commonId.Length;
            }
            return total + level;
        }

        //查看挂机及离线自动产出资源
        //public void LookAutoEarnings()
        //{
        //    //计算剩余最大有效时间
        //    float validTime = Mathf.Clamp(autoEarningsData.maxTime - autoEarningsData.userdTime, 0, autoEarningsData.maxTime);

        //    //计算资源类奖励 精确有效的挂机时间
        //    int currLength = autoEarningsData.lastTime_curr.Length;
        //    float[] currTimes = new float[currLength];
        //    for (int i = 0; i < currLength; i++)
        //    {
        //        DateTime dt = autoEarningsData.GetLastTime_Curr(i);
        //        float ts = (float)TimeManager.Instance.F_Difference_Dou(dt, DateTime.Now, 1);
        //        currTimes[i] = Mathf.Clamp(ts, 0, validTime);
        //    }
        //    //计算道具类奖励 精确有效的挂机时间
        //    int itemLength = autoEarningsData.lastTime_item.Length;
        //    float[] itemTimes = new float[itemLength];
        //    for (int i = 0; i < itemLength; i++)
        //    {
        //        DateTime dt = autoEarningsData.GetLastTime_Item(i);
        //        float ts = (float)TimeManager.Instance.F_Difference_Dou(dt, DateTime.Now, 1);
        //        itemTimes[i] = Mathf.Clamp(ts, 0, validTime);
        //    }
        //    //获取并合并计算后的data数据
        //    autoEarningsData.Combination(OperAutoEarnings(101, currTimes, itemTimes));
        //    //计算完毕后，更新上次获取奖励时间
        //    float diffTime = (float)TimeManager.Instance.F_Difference_Dou(autoEarningsData.GetLastTime(), DateTime.Now, 1);
        //    autoEarningsData.userdTime = diffTime;
        //    SaveDataManager.Instance.Save();
        //}

        //public AutoEarningsData OperAutoEarnings(int _index, float[] _currTime, float[] _itemTime)
        //{
        //    AutoEarningsData data = new AutoEarningsData();
        //    TplAutoEarnings tpl = TplManager.Instance.GetAutoEarningsById(_index);
        //    //资源类奖励
        //    for (int i = 0; i < tpl.currId.Length; i++)
        //    {
        //        float validTime_curr = _currTime[i] == 0f ? autoEarningsData.maxTime : _currTime[i];//有效时间
        //        long validNum_curr = (long)(validTime_curr / tpl.currTime[i]);//有效周期
        //        double num = validNum_curr * tpl.currNum[i];
        //        if (tpl.currId[i] == (int)TplCurrency.Currency.潜能经验)
        //            num = ((long)validTime_curr) * GetAutoReExpSpeed();
        //        else if (tpl.currId[i] == (int)TplCurrency.Currency.灵魂经验)
        //            num = num * GetAutoBookExpAddition();
        //        //else if
        //        if (_currTime[i] == 0f)
        //            data.AutoEarningsList_curr[i] = num;
        //        else
        //            data.AutoEarningsList_curr[i] += num;
        //        //计算结算奖励后的剩余挂机时间
        //        data.SetLastTime_Curr(i, -(validTime_curr % tpl.currTime[i]));
        //    }
        //    //道具类奖励
        //    int awardIndex = 0;
        //    foreach (var pool in tpl.itemPool)
        //    {
        //        TplAutoEarningPools tplPool = TplManager.Instance.GetAutoEarningPoolsById(pool);
        //        for (int i = 0; i < tplPool.itemId.Length; i++)
        //        {
        //            //实际掉落次数
        //            long validNum_item = (long)(_itemTime[i] / tplPool.itemTime[i]);
        //            for (int j = 0; j < validNum_item; j++)
        //            {
        //                //权重随机获取itemId
        //                int index = Tools.GetResultByProb(tplPool.itemType, tplPool.itemProb, true);
        //                int type = tplPool.itemType[index];
        //                int id = tplPool.itemId[index];
        //                int num = tplPool.itemNum[index];
        //                Item realItem = TplManager.Instance.GetItemById(type, id);
        //                bool isAddNum = false;
        //                if (realItem.stack > 1)
        //                {
        //                    for (int k = 0; k < data.AutoEarningsList_item.Count; k++)
        //                        if (data.AutoEarningsList_item[k] == id)
        //                        {
        //                            data.AutoEarningsList_num[k] += num;
        //                            isAddNum = true;
        //                            break;
        //                        }
        //                }
        //                if (!isAddNum)
        //                {
        //                    data.AutoEarningsList_type.Add(type);
        //                    data.AutoEarningsList_item.Add(id);
        //                    data.AutoEarningsList_num.Add(num);
        //                }
        //            }
        //            //计算结算奖励后的剩余挂机时间
        //            data.SetLastTime_Item(awardIndex, -(_itemTime[i] % tplPool.itemTime[i]));
        //            awardIndex += 1;
        //        }
        //    }
        //    return data;
        //}

        //领取挂机及离线自动产出资源
        public void AcquireAutoEarnings(Action<QuickHangUpRewardBack> action)
        {
            QuickHangUpRewardBack respon = null;
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
            () =>
            {
                respon = RpcServer.Instance.Player_client.GetHangUpData(DataManager.Instance.userId);
            },
            () =>
            {
#if UNITY_EDITOR
                Debug.Log(respon == null);
                Debug.Log(respon.RewardObj.Currencys == null ? "null" : (respon.RewardObj.Currencys.Count > 0 ? respon.RewardObj.Currencys.ToStringWithChar() : "0"));
                Debug.Log(respon.RewardObj.Items == null ? "null" : (respon.RewardObj.Items.Count > 0 ? respon.RewardObj.Items.ToStringWithChar() : "0"));
                Debug.Log(respon.RewardObj.Equipments == null ? "null" : (respon.RewardObj.Equipments.Count > 0 ? respon.RewardObj.Equipments.ToStringWithChar() : "0"));
                Debug.Log(respon.RewardStr);
#endif
                if (inventoryModel.CalcBagCount() < TplManager.Instance.GetBagLimitByName("背包").limit)
                    UIGlobal.instance.SendBubble("领取成功！");
                List<Item> itemList = new List<Item>();
                int sum = 0;
                //实际添加装备
                if (respon.RewardObj.Equipments != null)
                {
                    sum += respon.RewardObj.Equipments.Count;
                    foreach (var data in respon.RewardObj.Equipments)
                    {
                        UpdateEquipment(data);
                        Equipment equip = inventoryModel.OnAddEquipment(data);
                        equip.amount = 1;
                        //itemList.Add(equip);

                        //获取奖励装备 效果堆叠处理
                        int equipIndex = -1;
                        for (int j = 0; j < itemList.Count; j++)
                        {
                            if (itemList[j].quality == equip.quality && itemList[j].type == equip.type && itemList[j].tid == equip.tid)
                            {
                                equipIndex = j;
                                break;
                            }
                        }
                        if (equipIndex == -1)
                        {
                            itemList.Add(equip);
                        }
                        else
                        {
                            itemList[equipIndex].amount += 1;
                        }
                    }
                    EventManager.Instance.RaiseEvent("AddAchievement", new ArrayList() { (int)70005, (float)respon.RewardObj.Equipments.Count });
                }
                //if (respon.GoldChanged > 0)
                //{
                //    ChangeGold(respon.GoldChanged);
                //}
                if (respon.RewardObj.Currencys != null && respon.RewardObj.Currencys.Count > 0)
                {
                    ChangeCurrencyListCallback(respon.RewardObj.Currencys);
                    foreach (var data in respon.RewardObj.Currencys)
                    {
                        itemList.Add(TplManager.Instance.GetItemById(0, (int)data.Type, (int)data.ChangedValue, false));
                    }
                }
                if (respon.RewardObj != null && respon.RewardObj.Items != null && respon.RewardObj.Items.Count > 0)
                {
                    sum += respon.RewardObj.Items.Count;
                    for (int i = 0; i < respon.RewardObj.Items.Count; i++)
                    {
                        int amount = respon.RewardObj.Items[i].Amount - (int)GetAmountFromItemTpl(respon.RewardObj.Items[i].Type, respon.RewardObj.Items[i].Tid);
                        OnAddOrChangeItem(respon.RewardObj.Items[i]);
                        Item item = TplManager.Instance.GetItemById(respon.RewardObj.Items[i].Type, respon.RewardObj.Items[i].Tid);
                        item.amount = amount;
                        //itemList.Add(item);

                        //获取奖励道具 效果堆叠处理
                        int index = -1;
                        for (int j = 0; j < itemList.Count; j++)
                        {
                            if (itemList[j].type == item.type && itemList[j].tid == item.tid)
                            {
                                index = j;
                                break;
                            }
                        }
                        if (index == -1)
                        {
                            itemList.Add(item);
                        }
                        else
                        {
                            itemList[index].amount += 1;
                        }
                    }
                }
                EventManager.Instance.RaiseEvent("增加爵位任务进度", new ArrayList() { Type_GuideTaskID.累计领取X件战利品, sum });
                UI_ShowEquip.instance.ShowEquip(itemList);
                if (respon.BookLevelUp != null && respon.BookLevelUp.BLeveup)
                    ChangeBookExpCallback(respon.BookLevelUp, _b: true);



                long time = 0;
                RpcServer.Instance.netServerControll.CallRpcRemoteThread(
                () =>
                {
                    time = RpcServer.Instance.Client.GetServerTime();
                },
                () =>
                {
                    Debug.Log(time);
                    autoEarningsLastTime = TimeManager.Instance.GetDateByLinuxTimeStamp(time);
                    SaveDataManager.Instance.Save();
                }, "GetServerTime");
                action?.Invoke(respon);
            });
        }

        //初始化数据
        /*
        public void InitData()
        {
            if (userInfoModel == null)
            {
                //初始化 userInfoModel

            }
        }*/
        public void GetMazeMarket(Action<MazeMarketRespon> callback)
        {
            MazeMarketRespon respon = null;
            //发起网络通信           
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
                 () =>
                 {
                     respon = RpcServer.Instance.Cargo_client.GetMazeMarket(userId);
                 },
                () => { callback(respon); });
        }

        public void RefreshMazeMarket(Action<MazeMarketRespon> callback)
        {

            MazeMarketRespon respon = null;
            //发起网络通信
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
                 () =>
                 {
                     respon = RpcServer.Instance.Cargo_client.RefreshMazeMarket(userId);
                 },
                () => { callback(respon); });
        }


        /// <summary>
        /// 从服务器获取黑市商品列表从初始化数据
        /// </summary>
        public void GetBlackMarket(Action<MarketData> callback)
        {
            List<int> type = new List<int>();
            type.Add(0);
            type.Add(1);
            type.Add(2);
            type.Add(3);
            type.Add(4);
            MarketData respon = null;
            //发起网络通信           
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
                 () =>
                 {
                     respon = RpcServer.Instance.Cargo_client.GetMarketItem(userId, type);
                 },
                () => { callback(respon); }, "GetBlackMarket");
        }

        /// <summary>
        /// 从服务器刷新黑市商品列表
        /// </summary>
        public void RefreshBlackMarket(Action<BlackMarketRespon> callback)
        {

            BlackMarketRespon respon = null;
            //发起网络通信
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
                 () =>
                 {
                     respon = RpcServer.Instance.Cargo_client.RefreshBlackMarket(userId);
                     // ChangeCurrencyListCallback(respon.ChangedValue);
                 },
                () => { callback(respon); });
        }

        /// <summary>
        /// 从服务器购买物品
        /// </summary>
        public void GetBlackMarket(int index, Action<BuyBlackMarketRespon> callback)
        {

            BuyBlackMarketRespon respon = null;
            //发起网络通信
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
                 () =>
                 {
                     respon = RpcServer.Instance.Cargo_client.BuyBlackMarketByIndex(userId, index);
                 },
                () => { callback(respon); });
        }

        public void GetArenaMarket(Action<MazeMarketRespon> callback)
        {
            MazeMarketRespon respon = null;
            //发起网络通信           
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
                 () =>
                 {
                     respon = RpcServer.Instance.Cargo_client.GetHonorMarket(userId);
                 },
                 () => { callback(respon); });
        }


        /// <summary>
        /// 领取日常宝箱
        /// </summary>
        /// <param name="value"></param>
        public void GetDailyChest(int index)
        {
            dailyTaskActiveData.IndexList.Add(index);
            SaveDataManager.Instance.Save();
        }

        /// <summary>
        /// 判断这个宝箱是否领取
        /// </summary>
        /// <param name="index"></param>
        /// <returns></returns>
        public bool IsGetDailyChest(int index)
        {
            for (int i = 0; i < dailyTaskActiveData.IndexList.Count; i++)
            {

                if (dailyTaskActiveData.IndexList[i] == index)
                {
                    return true;
                }
            }
            return false;
        }

        /// <summary>
        /// 增加日常任务活跃度
        /// </summary>
        /// <param name="value"></param>
        public void AddDailyActiveness(int value)
        {
            dailyTaskActiveData.Activeness += value;
        }


        public MainTask GetMainTask(int id)
        {
            for (int i = 0; i < mainTaskIDList.Count; i++)
            {
                if (mainTaskIDList[i].Tid == id)
                {
                    return mainTaskIDList[i];
                }
            }

            //mainTaskIDList.Add(new MainTask { Id = id, Num = 0,CountID=0, State="Lock" });
            SaveDataManager.Instance.Save();
            return mainTaskIDList[mainTaskIDList.Count - 1];

        }

        public thrift.sts.GuideTaskData GetGuideTask(int id)
        {
            for (int i = 0; i < guideTaskDataList.Count; i++)
            {
                if (guideTaskDataList[i].Id == id)
                {
                    return guideTaskDataList[i];
                }
            }
            return guideTaskDataList[guideTaskDataList.Count - 1];
        }

        /// <summary>
        /// 找guidetasklist下标的
        /// </summary>
        /// <param name="index"></param>
        /// <returns></returns>

        public int GetGuideTaskId(int taskid)
        {
            for (int i = 0; i < guideTaskDataList.Count; i++)
            {
                if (guideTaskDataList[i].Id == taskid)
                {
                    return i;
                }
            }
            return 0;
        }

        public void CheckGoldTask(int num, int id, int count, int type) //type=1:金币等级；type=2：潜能等级;3:天赋等级；4：印记等级
        {
            int heroCount = 0;//达标的英雄数量
            guideTaskDataList[id].Num = heroCount;
            for (int i = 0; i < heroDataList.Count; i++)
            {
                if (type == 1)
                {
                    if (heroDataList[i].Level >= num)
                    {
                        heroCount++;
                        guideTaskDataList[id].Num = heroCount;
                    }
                }
                else if (type == 2)
                {
                    if (heroDataList[i].Potency >= num)
                    {
                        heroCount++;
                        guideTaskDataList[id].Num = heroCount;
                    }
                }
                else if (type == 3)
                {
                    if (heroDataList[i].TalentLevel >= num)
                    {
                        heroCount++;
                        guideTaskDataList[id].Num = heroCount;
                    }
                }
                else
                {
                    if (heroDataList[i].PartIntensifyData[0] >= num && heroDataList[i].PartIntensifyData[1] >= num && heroDataList[i].PartIntensifyData[2] >= num && heroDataList[i].PartIntensifyData[3] >= num && heroDataList[i].PartIntensifyData[4] >= num)
                    {
                        heroCount++;
                        guideTaskDataList[id].Num = heroCount;
                    }
                }
            }
            if (heroCount >= count && guideTaskDataList[id].State == "Inprogress")//达标了
            {
                guideTaskDataList[id].State = "Get";
            }
            else if (heroCount < count)
            {
                guideTaskDataList[id].State = "Inprogress";
            }
        }

        public void GuideTaskCallBack(Type_GuideTaskID type_GuideTaskID, int num = 1, int sum = 0)
        {
            int id = (int)type_GuideTaskID;
            List<int> taskId = TplManager.Instance.GetGuideTaskIdByLevel(taskLevel);//获取当前段位的4个任务
            for (int i = 0; i < guideTaskDataList.Count; i++)//guidetaskdatalist应该有12种
            {
                if (guideTaskDataList[i].Id == id)
                {
                    if (type_GuideTaskID == Type_GuideTaskID.英雄金币等级 || type_GuideTaskID == Type_GuideTaskID.英雄潜能等级 || type_GuideTaskID == Type_GuideTaskID.英雄天赋等级)//需要特殊处理的任务
                    {
                        int x = 0;
                        switch (type_GuideTaskID)
                        {
                            case Type_GuideTaskID.英雄金币等级: x = 1; break;
                            case Type_GuideTaskID.英雄潜能等级: x = 2; break;
                            case Type_GuideTaskID.英雄天赋等级: x = 3; break;
                            case Type_GuideTaskID.任意3个英雄全部印记达到15级: x = 4; break;
                        }
                        if (TplManager.Instance.GetGuideTaskByLevelAId(taskLevel, id) != null)
                            CheckGoldTask(TplManager.Instance.GetGuideTaskByLevelAId(taskLevel, id).requireNum, i, TplManager.Instance.GetGuideTaskByLevelAId(taskLevel, id).requireHero, x);//英雄金币等级特殊处理
                    }
                    else if (TplManager.Instance.GetGuideTaskById(id).type == 1)//如果这个任务是需要重置的
                    {
                        if (taskId.Contains(id))//如果当前4个任务中有这个任务
                        {
                            if (sum == 0)
                                guideTaskDataList[i].Num += num;
                            else
                            {
                                if (guideTaskDataList[i].Num < sum)
                                    guideTaskDataList[i].Num = sum;
                            }
                            if (TplManager.Instance.GetGuideTaskByLevelAId(taskLevel, id) != null)
                                if (guideTaskDataList[i].Num >= TplManager.Instance.GetGuideTaskByLevelAId(taskLevel, id).requireNum && guideTaskDataList[i].State == "Inprogress")
                                    guideTaskDataList[i].State = "Get";
                        }
                    }
                    else
                    {
                        if (sum == 0)
                            guideTaskDataList[i].Num += num;
                        else
                        {
                            if (guideTaskDataList[i].Num < sum)
                                guideTaskDataList[i].Num = sum;
                        }
                        if (TplManager.Instance.GetGuideTaskByLevelAId(taskLevel, id) != null)
                            if (guideTaskDataList[i].Num >= TplManager.Instance.GetGuideTaskByLevelAId(taskLevel, id).requireNum && guideTaskDataList[i].State == "Inprogress")
                                guideTaskDataList[i].State = "Get";
                    }
                }
            }
            EventManager.Instance.RaiseEvent("更新引导任务信息");
            EventManager.Instance.RaiseEvent("ShowTaskPopWindow");
        }
        /// <summary>
        /// 增加主线任务,废
        /// </summary>
        /// <param name="index"></param>
        /// <returns></returns>
        public void AddMainTaskValue(Type_MainTaskID type_MainTaskID, int num = 1, int sum = 0)
        {
            int id = (int)type_MainTaskID;
            List<TplMainTask> tplMainTasks = TplManager.Instance.GetTplMainTask();
            for (int i = 0; i < mainTaskIDList.Count; i++)
            {
                if (mainTaskIDList[i].Tid == id && mainTaskIDList[i].State != "Complete" && mainTaskIDList[i].CountID < tplMainTasks[i].count.Count)
                {
                    RpcAddMainTaskValue(id, num, sum, i);
                }
            }
        }

        /// <summary>
        /// 获取日常任务信息
        /// </summary>
        /// <param name="index"></param>
        /// <returns></returns>
        public thrift.sts.DailyTaskData GetDailyTask(int id)
        {
            for (int i = 0; i < dailyTaskDatas.Count; i++)
            {
                if (dailyTaskDatas[i].Id == id)
                {
                    return dailyTaskDatas[i];
                }
            }

            // dailyTaskDatas.Add(new DailyTaskData { id = id, num = 0, isComplete = false });
            //  SaveDataManager.Instance.Save();
            return dailyTaskDatas[dailyTaskDatas.Count - 1];

        }

        /// <summary>
        /// 获取日常任务进度
        /// </summary>
        /// <param name="index"></param>
        /// <returns></returns>
        public float GetDailyTaskInProgress(int id)
        {
            //按完成度，先是没领取的，再是进行中的，再是关卡不够的，最后是已完成的
            if (TplManager.Instance.GetTplDailyTaskID(id).level > GetMaxStage())
                return -1;
            for (int i = 0; i < dailyTaskDatas.Count; i++)
            {
                if (dailyTaskDatas[i].Id == id)
                {
                    if (dailyTaskDatas[i].IsComplete)
                        return -2;
                    else
                        return dailyTaskDatas[i].Num / (float)TplManager.Instance.GetTplDailyTaskID(id).times;
                }
            }
            return 0;
        }

        /// <summary>
        /// 获取主线任务进度
        /// </summary>
        /// <param name="index"></param>
        /// <returns></returns>
        public float GetMainTaskInProgress(int id)
        {
            //if (id == 1 || id == 6 || id == 12)
            // return 0;
            for (int i = 0; i < mainTaskIDList.Count; i++)
            {
                if (mainTaskIDList[i].Tid == id)
                {
                    if (mainTaskIDList[i].State == "Complete" || mainTaskIDList[i].CountID >= TplManager.Instance.GetTplMainTaskID(id).count.Count)
                        return 0;
                    return mainTaskIDList[i].Num / (float)TplManager.Instance.GetTplMainTaskID(id).count[mainTaskIDList[i].CountID];
                }
            }
            return 0;
        }


        /// <summary>
        /// 获取槽位的技能研究情况
        /// </summary>
        /// <param name="index"></param>
        /// <returns></returns>
        public MagicResearchSlotData GetMagicSlot(int index = 0)
        {
            if (magicResearchSlotList.Count == 0 || magicResearchSlotList[index] == null)
            {
                return null;
            }
            return magicResearchSlotList[index];
        }

        /// <summary>
        /// 增加槽位的技能研究
        /// </summary>
        /// <param name="index"></param>
        /// <returns></returns>
        public void AddMagicSlotSkill(long time, int id, int index = 0, string name = "")
        {
            //if (magicResearchSlotList.Count == 0)
            //{

            //}
            if (magicResearchSlotList.Count < index + 1)
            {
                magicResearchSlotList.Add(new MagicResearchSlotData { id = id, startTime = time, name = name });
            }
            else
            {
                magicResearchSlotList[index] = new MagicResearchSlotData { id = id, startTime = time, name = name };
            }
            SaveDataManager.Instance.Save();
        }

        public void RemoveMagicSlotSkill(int index = 0)
        {
            magicResearchSlotList[index] = null;
        }

        /// <summary>
        /// 修改法力之尘 增加物品方法 AddItem
        /// </summary>
        public void ChangeManaDust(int num, Action action = null)
        {
            List<CurrencyChanged> list = new List<CurrencyChanged>();
            //等待网络通信协程
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
                () => { list.Add(RpcServer.Instance.Client.ChangeMD(userId, (long)num)); },
                () =>
                {
                    ChangeCurrencyListCallback(list);
                    if (action != null)
                        action.Invoke();
                });
        }

        public void Changezhaohuan(int num, Action action = null)
        {

            if (GetMaterialDataByTid(ConstDataManager.召唤券ID) != null)
            {
                thrift.sts.Item back_item = null;
                //等待网络通信协程
                RpcServer.Instance.netServerControll.CallRpcRemoteThread(
                    () => { back_item = RpcServer.Instance.Item_client.ChangeItemAmount(userId, ConstDataManager.召唤券ID, num, (int)Item.Type.Material); },
                    () =>
                    {
                        OnAddOrChangeItem(back_item);
                        EventManager.Instance.RaiseEvent("更新召唤券数量", back_item.Amount);
                        if (action != null)
                            action.Invoke();
                    });
                return;
            }

            thrift.sts.Item new_item = new thrift.sts.Item();
            new_item.Tid = ConstDataManager.召唤券ID;
            new_item.Type = (int)Item.Type.Material;
            new_item.Amount = num;

            RpcAddItem(new_item,
                () => { EventManager.Instance.RaiseEvent("更新召唤券数量", new_item.Amount); });
        }


        /// <summary>
        /// rpc 删除整个物品
        /// </summary>
        /// <param name="item"></param>
        public void RpcRemoveItem(Item item)
        {
            Tools.Print("RpcRemoveItem  " + item.ToString(), Tools.Programmer.Dashi);
            bool succ = false;
            thrift.sts.Item thrift_item = GetItemDataByItem(item);
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
            () => { succ = RpcServer.Instance.Item_client.RemoveItem(userId, thrift_item); },
            () =>
            {
                if (succ)
                {
                    //删除余量成功
                    thrift_item.Amount = 0;
                    OnAddOrChangeItem(thrift_item);
                }
                else
                    Debug.Log("RpcRemoveItem failed " + item.dbId);

            });
        }

        //拉取服务端物品列表
        public void RpcGetItemList()
        {
            List<thrift.sts.Item> itemList = null;
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
              () => { itemList = RpcServer.Instance.Item_client.GetItemList(userId); },
              () =>
              {
                  if (itemList == null)
                  {
                      Debug.LogError("拉取物品表失败!?");
                      return;
                  }
                  Tools.Print("获取物品列表成功 len " + itemList.Count, Tools.Programmer.Dashi);
                  inventoryModel.materialList.Clear();
                  inventoryModel.consumableList.Clear();
                  inventoryModel.questList.Clear();
                  foreach (var item in itemList)
                  {
                      //Debug.Log(item.ToString());
                      OnAddOrChangeItem(item);
                  }
              });
        }

        public void UpdateEquipment(thrift.sts.Equipment equipment)
        {
            //Tools.Print($"<color=orange>装入data装备{equipment.ToString()}</color>", Tools.Programmer.Dashi);
            //EquipmentData data = new EquipmentData(equipment.DbId, equipment.Tid,equipment);
            equipmentDataDic[equipment.DbId] = equipment;

        }

        public void RpcGetEquipmentList()
        {
            List<thrift.sts.Equipment> dataList = null;

            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
              () => { dataList = RpcServer.Instance.Equip_client.GetEquipmentList(userId); },
              () =>
              {
                  if (dataList == null)
                  {
                      Debug.LogError("拉取准备表失败!?");
                      return;
                  }
                  Tools.Print("获取装备列表成功 len " + dataList.Count, Tools.Programmer.Dashi);
                  inventoryModel.equipmentList.Clear();
                  inventoryModel.equipmentList_Equipped.Clear();
                  //foreach (var data in dataList)
                  //{
                  //    //Debug.Log(data.ToString());
                  //    UpdateEquipment(data);
                  //    inventoryModel.OnAddEquipment(data);

                  //}
                  for (int i = 0; i < dataList.Count; i++)
                  {
                      //Debug.Log(data.ToString());
                      UpdateEquipment(dataList[i]);
                      inventoryModel.OnAddEquipment(dataList[i]);
                  }
              });

        }


        //获取英雄列表
        public void RpcGetHeroList()
        {
            List<thrift.sts.HeroData> respon = null;
            //等待网络通信协程
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
                () => { respon = RpcServer.Instance.Hero_client.GetHeroDataList(userId); },
                () =>
                {
                    m_heroDataList.Clear();
                    CallBack_AddNewHeroData(respon);
                    HeroInfoListLoadData();
                });
        }

        public void RpcGetCheckList()
        {
            DailyBonus respon = null;
            //等待网络通信协程
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
                () => { respon = RpcServer.Instance.Client.GetDailyBonus(userId); },
                () =>
                {
                    checkList = respon.CheckDay;
                    checkDay = respon.Day;
                });

        }

        public void RpcGetActionPoint()
        {
            ActionPoint respon = null;
            //发起网络通信
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
                () => { respon = RpcServer.Instance.Actionpoint_client.GetActionPoint(DataManager.Instance.userId); },
                () =>
                {
                    DataManager.Instance.currentActionPoint = respon.CurrentActionPoint;
                    DataManager.Instance.costActionPoint = respon.CostActionPoint;
                    EventManager.Instance.RaiseEvent("更新行动力");
                });
        }

        public void RpcGetMainTaskList()
        {
            List<thrift.sts.MainTask> respon = null;
            //等待网络通信协程
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
                () => { respon = RpcServer.Instance.Client.GetMainTaskList(userId); },
                () =>
                {
                    mainTaskIDList = respon;
                });
        }

        public void RpcGetDailyTaskList()
        {
            thrift.sts.DailyTaskRespon respon = null;
            //等待网络通信协程
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
                () => { respon = RpcServer.Instance.Client.GetDailyTask(userId); },
                () =>
                {
                    dailyTaskDatas = respon.TaskList;
                    dailyTaskActiveData = respon.DailyActive;
                });
        }

        public void RpcGetGuideTaskList()
        {
            List<thrift.sts.GuideTaskData> respon = null;
            //等待网络通信协程
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
                () => { respon = RpcServer.Instance.Client.GetGuideTask(userId); },
                () =>
                {
                    guideTaskDataList = respon;
                });
        }

        public void GetGuideTaskList()
        {
            for (int i = 101; i < 113; i++)
            {
                DataManager.Instance.GetGuideTask(i);
            }
        }

        public void RpcGetGuildInfo()
        {
            GetInitInfo respon = null;
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
            () => { respon = RpcServer.Instance.Guild_client.GetGuildInitInfo(DataManager.Instance.userId); },
                    () =>
                    {
                        if (respon.GuildInfo != null)
                        {
                            guildName = respon.GuildInfo.Name;
                            rps.SetRedPointNodeCallBack(RedPointConst.guildApply, redPointNum: (respon.GuildInfo.ApplyList.Count != 0 && respon.SelfInfo.WorkType == (int)workType.会长) ? 1 : 0);
                        }
                        if (respon.SelfInfo != null)
                        {
                            guildCheck = respon.SelfInfo.IsCheck;
                            rps.SetRedPointNodeCallBack(RedPointConst.guildCheck, redPointNum: guildCheck ? 0 : 1);



                        }
                    });
        }


        public void RpcGetPlayerTalent()
        {
            List<thrift.sts.PlayerTalentData> respon = null;
            //等待网络通信协程
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
                () => { respon = RpcServer.Instance.Client.GetPlayerTalent(userId); },
                () =>
                {
                    playerTalentDataList = respon;
                    userData.talentCurrentPoint = respon[0].TalentCurrentPoint;
                });
        }

        //获取章节数据
        public void RpcGetBasicPlotData()
        {
            thrift.sts.BasicPlotData respon = null;
            //等待网络通信协程
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
                () => { respon = RpcServer.Instance.Client.GetBasicPlotData(userId); },
                () =>
                {
                    if (respon != null)
                    {
                        basicPlotData = respon;
                        BasicPlotDataUpdate();
                        curBasicPlotProgress = basicPlotData.PassInfo.CurProgress ? curBasicPlotBattle.maxProgress : 0;
                        Map_Ctrl.instance.Init_Map_Model_List();
                    }
                    else
                        Debug.LogError("主线存档get失败！");
                },
                "GetBasicPlotData");
        }

        public void RpcAddMainTaskValue(int id, int num, int sum, int index)
        {
            thrift.sts.MainTask respon = null;
            //等待网络通信协程
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
                () => { respon = RpcServer.Instance.Client.AddMainTaskValue(userId, id, num, sum); },
                () =>
                {
                    mainTaskIDList[index] = respon;
                    EventManager.Instance.RaiseEvent("更新任务红点");
                });
        }

        //通知服务端变更数据..不依赖返回结果 页面数据上一步已经更新
        public void RpcChangeEquipment(thrift.sts.Equipment data, Action action = null)
        {
            if (data.DbId <= 0)
            {
                Debug.LogError("要变动的装备 dbId 异常!" + data.DbId);
                return;
            }
            long retDbid = 0;
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
            () => { retDbid = RpcServer.Instance.Equip_client.UpdateEquipment(userId, data); },
            () =>
            {
                if (retDbid != data.DbId)
                {
                    Debug.LogError("要变动的装备 dbId 返回异常 !?" + retDbid + " < dbid >" + data.DbId);
                    return;
                }
                if (action != null)
                {
                    action.Invoke();
                }
            });
        }



        //请求增加物品
        public void RpcAddItem(thrift.sts.Item new_item, Action action = null)
        {
            Debug.Log("增加物品" + new_item.Tid + " amout " + new_item.Amount);

            thrift.sts.Item item_back = null;
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
              () => { item_back = RpcServer.Instance.Item_client.AddItem(userId, new_item); },
              () =>
              {
                  OnAddOrChangeItem(item_back);
                  if (action != null)
                      action.Invoke();
              });
        }

        //删除物品
        public void RpcDecomposeEquipment(List<long> dbId, Action action = null)
        {
            Tools.Print("删除装备" + dbId, Tools.Programmer.Dashi);
            DecomposeEquipmentRespon respon = null;
            List<thrift.sts.Equipment> equipList = new List<thrift.sts.Equipment>();
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
              () => { respon = RpcServer.Instance.Equip_client.DecomposeEquipment(userId, dbId); },
              () =>
              {
                  if (respon.Succ)
                  {
                      for (int i = 0; i < dbId.Count; i++)
                      {
                          //thrift.sts.Equipment data = equipmentDataDic[dbId[i]]; //减少GC开销 Editor by jwx 2020.11.17
                          equipList.Add(equipmentDataDic[dbId[i]]);
                          equipmentDataDic.Remove(dbId[i]);

                      }
                      inventoryModel.OnRemoveEquipment(equipList);
                      ParseRewardStrByServer(respon.RewardStr);
                      if (respon.RewardObj != null)
                      {
                          if (respon.RewardObj.Currencys != null)
                          {
                              DataManager.Instance.ChangeCurrencyListCallback(respon.RewardObj.Currencys);
                          }
                          if (respon.RewardObj.Items != null)
                          {
                              for (int i = 0; i < respon.RewardObj.Items.Count; i++)
                              {
                                  DataManager.Instance.GetRewardFromItemTpl(respon.RewardObj.Items[i].Type, respon.RewardObj.Items[i].Tid, respon.RewardObj.Items[i].Amount);
                              }
                          }
                          if (respon.RewardObj.Equipments != null)
                          {
                              for (int i = 0; i < respon.RewardObj.Equipments.Count; i++)
                              {
                                  DataManager.Instance.OnAddEquipment(respon.RewardObj.Equipments[i]);
                              }
                          }
                      }
                      if (action != null)
                          action.Invoke();
                      Tools.Print("删除装备成功 " + dbId, Tools.Programmer.Dashi);
                      EventManager.Instance.RaiseEvent("删除装备成功");
                      EventManager.Instance.RaiseEvent("更新左下角提示特效");
                  }
                  else
                      Debug.LogError("删除装备失败!? dbId " + dbId);

              });
        }

        //删除物品
        public void RpcRemoveEquipment(List<long> dbId, Action action = null)
        {
            Tools.Print("删除装备" + dbId, Tools.Programmer.Dashi);
            bool succ = false;
            List<thrift.sts.Equipment> equipList = new List<thrift.sts.Equipment>();
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
              () => { succ = RpcServer.Instance.Item_client.RemoveEquipment(userId, dbId); },
              () =>
              {
                  if (succ)
                  {
                      for (int i = 0; i < dbId.Count; i++)
                      {
                          thrift.sts.Equipment data = equipmentDataDic[dbId[i]];
                          equipmentDataDic.Remove(dbId[i]);
                          equipList.Add(data);
                      }
                      inventoryModel.OnRemoveEquipment(equipList);
                      if (action != null)
                          action.Invoke();
                      Tools.Print("删除装备成功 " + dbId, Tools.Programmer.Dashi);
                      EventManager.Instance.RaiseEvent("删除装备成功");
                      EventManager.Instance.RaiseEvent("更新左下角提示特效");
                  }
                  else
                      Debug.LogError("删除装备失败!? dbId " + dbId);

              });
        }

        public int GetManaDust()
        {
            return GetItemAmount(ConstDataManager.法力之尘ID, Item.Type.Material);
        }

        /// <summary>
        /// 获取魔法技能等级
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public int GetMagicLevelData(int id)
        {
            for (int i = 0; i < magicResearchList.Count; i++)
            {
                if (id == magicResearchList[i].id)
                {
                    return magicResearchList[i].level;
                }
            }

            return 0;
        }
        public float GetMagicEffects(int id)
        {
            for (int i = 0; i < magicResearchList.Count; i++)
            {
                if (id == magicResearchList[i].id)
                {
                    TplMagicResearch tpl = TplManager.Instance.GetTplMagicResearchID(id);
                    return magicResearchList[i].level * tpl.num;
                }
            }

            return 0;
        }

        /// <summary>
        /// 增加魔法技能等级
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public void AddMagicLevelData(int id)
        {
            for (int i = 0; i < magicResearchList.Count; i++)
            {
                if (id == magicResearchList[i].id)
                {
                    magicResearchList[i].level += 1;
                    return;
                }
            }
            magicResearchList.Add(new MagicResearchData { id = id, level = 1 });
        }


        //PartList
        /// <summary>
        /// 获取对应的英雄部位等级
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public int GetPartData(long tid, signType part)
        {
            for (int i = 0; i < heroDataList.Count; i++)
            {
                if (heroDataList[i].Tid == tid)
                {
                    if (heroDataList[i].PartIntensifyData == null)
                        return 0;
                    for (int j = 0; j < heroDataList[i].PartIntensifyData.Count; j++)
                    {
                        if (j == (int)part)
                        {
                            return heroDataList[i].PartIntensifyData[j];
                        }
                    }
                    return 0;
                }
            }
            return 0;
        }

        /// <summary>
        /// 升级玩家天赋
        /// </summary>
        /// <param name="ID"></param>
        /// <param name="Level"></param>
        public void SetPlayerTalent(int ID, int Level, float effects)
        {
            for (int i = 0; i < playerTalentDataList.Count; i++)
            {
                if (playerTalentDataList[i].Id == ID)
                {
                    playerTalentDataList[i].Level = Level;
                    return;
                }
            }
        }


        /// <summary>
        /// 获取对应的天赋等级
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public int GetPlayerTalentLevel(int id)
        {
            for (int i = 0; i < playerTalentDataList.Count; i++)
            {
                if (playerTalentDataList[i].Id == id)
                {
                    return playerTalentDataList[i].Level;
                }
            }

            return 0;
        }
        public float GetPlayerTalentEffects(int id)
        {
            for (int i = 0; i < playerTalentDataList.Count; i++)
            {
                if (playerTalentDataList[i].Id == id)
                {
                    float effect = TplManager.Instance.GetTplPlayerTalent(id).effectsPerLevel;
                    return playerTalentDataList[i].Level * effect;
                }
            }

            return 0;
        }


        /// <summary>
        /// 获取当前天赋数
        /// </summary>
        /// <returns></returns>
        public int GetPlayerTalentCurrentPoint()
        {
            return userData.talentCurrentPoint;
        }

        /// <summary>
        /// 获取总共天赋数
        /// </summary>
        /// <returns></returns>
        public int GetPlayerTalentTotalPoint()
        {
            return userData.talentTotalPoint;
        }



        //获取书等级
        public TplBookLevel GetBookLevel()
        {
            if (bookLevel == null)
            {
                bookLevel = TplManager.Instance.GetTplBookLevelByExp(bookExp);
                return bookLevel;
            }
            return bookLevel;
        }

        //更新天赋点数
        public void UpdateTalentPoint(thrift.sts.BookLevelUpRespon user, thrift.sts.BookExpRespon respon2)
        {
            if (user != null)
            {
                if (userData.talentCurrentPoint != user.TalentCurrentPoint || userData.talentTotalPoint != user.TalentTotalPoint)
                {
                    //当前天赋点改动 触发消息
                    userData.talentCurrentPoint = user.TalentCurrentPoint <= user.TalentTotalPoint ? user.TalentCurrentPoint : user.TalentTotalPoint;
                    userData.talentTotalPoint = user.TalentTotalPoint;
                    Debug.Log("当前天赋点改动 触发消息");
                    EventManager.Instance.RaiseEvent("玩家天赋数改变");
                    EventManager.Instance.RaiseEvent("更新左下角提示特效");
                }
            }
            else
            {
                if (userData.talentCurrentPoint != respon2.User.TalentCurrentPoint || userData.talentTotalPoint != respon2.User.TalentTotalPoint)
                {
                    //当前天赋点改动 触发消息
                    userData.talentCurrentPoint = respon2.User.TalentCurrentPoint;
                    userData.talentTotalPoint = respon2.User.TalentTotalPoint;
                    Debug.Log("当前天赋点改动 触发消息");
                    EventManager.Instance.RaiseEvent("玩家天赋数改变");
                    EventManager.Instance.RaiseEvent("更新左下角提示特效");
                }
            }

        }

        //改变数经验回调
        public void ChangeBookExpCallback(thrift.sts.BookLevelUpRespon respon, thrift.sts.BookExpRespon respon2 = null, bool _b = true)
        {
            if (respon == null && respon2 == null)
                return;
            if (respon != null && _b)
                _b = respon.BLeveup;
            UpdateTalentPoint(respon, respon2);
            List<Item> awards = new List<Item>();
            List<CurrencyChanged> currs = new List<CurrencyChanged>();
            if (respon != null)
            {
                if (respon.RewardStr != null)
                {
                    if (ValidateStr(respon.RewardStr))
                    {

                        String[] itemlen = respon.RewardStr.Split('|');
                        for (int i = 0; i < itemlen.Length; i++)
                        {
                            String[] cell = itemlen[i].Split('-');
                            Item item = TplManager.Instance.GetItemById(int.Parse(cell[0]), int.Parse(cell[1]));
                            item.amount = int.Parse(cell[2]);
                            awards.Add(item);
                        }
                    }
                }
            }
            else
            {
                ////获得物品
                if (respon2.Item != null)
                {
                    //计算奖励获得数量 前后对比
                    foreach (var award in respon2.Item)
                    {
                        Item item = TplManager.Instance.GetItemById(award.Type, award.Tid);
                        item.amount = award.Amount - DataManager.Instance.GetItemAmount(award.Tid, (Item.Type)award.Type);
                        awards.Add(item);
                    }
                }
                if (respon2.Currency != null)
                {
                    currs = respon2.Currency;
                }
                userData.bookExp = respon2.User.BookExp;
            }


            //客户端自己更新书的等级，按照模板表发放奖励
            CheckBookLevelUp(userData.lastExp, currs, awards);//使用前后bookExp差
            //SaveDataManager.Instance.Save();

            if (_b)
                EventManager.Instance.RaiseEvent("开始播放book升级效果");

        }

        //书经验值
        public void ChangeBookExp(int amount, bool _b = true)
        {
            thrift.sts.BookExpRespon respon = null;
            //发起网络通信
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
                () => { respon = RpcServer.Instance.Client.ChangeBookExp(userId, amount); },
                () =>
                {
                    ChangeBookExpCallback(null, respon, _b);
                });



        }

        //服务端回调改写货币
        public void OnUpdateMagicStone(long value)
        {
            magicStone = value;
            EventManager.Instance.RaiseEvent("更新左下角提示特效");
        }

        //向服务端申请改变货币
        public void ChangeMagicStone(long amount, int _type = 0)//type:1=关卡收益，2=挂机收益
        {
            float add = 1;
            if (amount > 0)
            {
                if (_type == 1)
                    add = Addition.mStone_dungeon;
                else if (_type == 2)
                    add = Addition.mStone_auto;
                amount = (long)(amount * add);
            }

            //magicStone += amount;

            thrift.sts.CurrencyChanged respon = null;
            //发起网络通信
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
                () => { respon = RpcServer.Instance.Player_client.ChangeMS(userId, amount); },
                () =>
                {
                    if (respon != null)
                        OnUpdateMagicStone(respon.CurrVaule);
                });
        }

        //神力结晶
        public void ChangeSacredCrystal(long amount, long currentValue = 0)
        {
            //Debug.Log(string.Format("修改神力结晶 变动 {0} 当前{1}", amount, currentValue));

            //以服务端数据更新当前持有值
            if (currentValue > 0)
            {
                sacredCrystal = currentValue;
            }
            else
            {
                sacredCrystal += amount;
                if (sacredCrystal < 0)
                    sacredCrystal = 0;
            }
        }

        public void OnUpdateGold(double _value)
        {
            Debug.Log($"当前金币:{gold}, 金币变更:to{_value}");
            gold = _value;
        }
        //金币
        public void ChangeGold(double _accu, int type = 0)//type=0不适用加成，type=1适用通用加成，type=2适用挂机加成，type=2适用杀怪加成
        {
            Debug.Log($"当前金币:{gold}, 金币变更:+{_accu},type:{type}");

            if (_accu > 0)
            {
                switch (type)
                {
                    case 1:

                        break;
                    case 3:
                        _accu = _accu * Addition.reGold;
                        break;
                    default:
                        break;
                }
                awardData_Round.goldNum += _accu;
            }
            gold += _accu;
            if (gold < 0) gold = 0;
        }
        //
        public void ChangeReExp(double amount)
        {
            //
            reExp = _reExp + amount;
        }
        //
        public void ChangeInnerFire(double amount)
        {
            //
            innerFire += amount;
        }

        //获得水晶（当前仅用于商店兑换）
        public void ChargeCrystal(long amount)
        {
            List<thrift.sts.CurrencyChanged> respon = null;
            //等待网络通信协程
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
                () => { respon = RpcServer.Instance.Client.ChargeCrystal(userId, amount); },
                () =>
                {
                    ChangeCurrencyListCallback(respon);
                });
        }
        //经验值
        public void ChangeExp(float amount)
        {
            exp = Mathf.Clamp(exp + amount, 0, tempData.expMax);
        }


        public void OnUpdateLuckyStone(long value)
        {
            luckyStone = value;
        }

        //幸运币
        public void ChangeLuckyStone(long amount, int _type = 0)//type:1=关卡收益，2=挂机收益
        {
            float add = 1;
            if (amount > 0)
            {
                amount = (long)(amount * add);
            }

            thrift.sts.CurrencyChanged respon = null;
            //等待网络通信协程
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
                () => { respon = RpcServer.Instance.Player_client.ChangeLC(userId, amount); },
                () =>
                {
                    if (respon != null)
                        OnUpdateLuckyStone(respon.CurrVaule);
                });

        }


        /// <summary>
        /// 改变服务端货币回调
        ///   钻石/水晶/灵魂经验
        /// </summary>
        /// <param name="respon"></param>
        public void ChangeCurrencyListCallback(List<CurrencyChanged> respon)
        {
            if (respon.Count == 0) return;
            Debug.Log("skillPoint changed " + respon.ToString());
            foreach (var item in respon)
            {
                switch (item.Type)
                {
                    case (int)TplCurrency.Currency.钻石:
                        sacredCrystal = item.CurrVaule;
                        break;
                    case (int)TplCurrency.Currency.金币:
                        Debug.Log($"当前金币:{gold}, 金币变更:" + item.CurrVaule);
                        gold = item.CurrVaule;
                        break;
                    case (int)TplCurrency.Currency.水晶:
                        crystal = item.CurrVaule;
                        break;
                    case (int)TplCurrency.Currency.灵魂经验:
                        bookExp = Convert.ToInt32(item.CurrVaule);
                        break;
                    case (int)TplCurrency.Currency.潜能经验:
                        reExp = item.CurrVaule;
                        break;
                    case (int)TplCurrency.Currency.心灵之火:
                        innerFire = item.CurrVaule;
                        break;
                    case (int)TplCurrency.Currency.魔法石:
                        magicStone = item.CurrVaule;
                        break;
                    case (int)TplCurrency.Currency.粉尘:
                        ManaDust = item.CurrVaule;
                        break;
                    case (int)TplCurrency.Currency.幸运币:
                        luckyStone = item.CurrVaule;
                        break;
                    case (int)TplCurrency.Currency.迷宫硬币:
                        mazeCoin = item.CurrVaule;
                        break;
                    case (int)TplCurrency.Currency.荣誉点数:
                        honorPoint = item.CurrVaule;
                        break;
                    case (int)TplCurrency.Currency.公会币:
                        guildCoin = item.CurrVaule;
                        break;
                    case (int)TplCurrency.Currency.强化石:
                        upgradeStone = item.CurrVaule;
                        break;
                    case (int)TplCurrency.Currency.强化结晶:
                        upgradeCrystal = item.CurrVaule;
                        break;
                    case (int)TplCurrency.Currency.绝境徽章:
                        fortressPoint = item.CurrVaule;
                        break;
                    case (int)TplCurrency.Currency.阅历:
                        experience = item.CurrVaule;
                        break;
                    default:
                        break;
                }
            }
            //EventManager.Instance.RaiseEvent("刷新商品显示");
        }


        public void OnUpdateReExp(double amount)
        {
            reExp = amount;
        }
        public void OnUpdateReExpPool(double amount)
        {
            reExp_pool = amount;
            EventManager.Instance.RaiseEvent("更新潜能经验显示");
        }
        public void OnUseReExpPool()
        {
            double reExpPool = reExp_pool;
            reExp_pool = 0;
            reExp = _reExp + reExpPool;
        }

        //修改潜能经验值
        public void RpcUpdateReExp(double amount, UnityAction action = null)
        {
            //
            thrift.sts.UserData respon = null;
            //发起网络通信
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
                () =>
                {
                    respon = RpcServer.Instance.Client.ChangeReExp(userId, amount);
                },
                () =>
                {
                    OnUpdateReExp(respon.ReExp);
                    action?.Invoke();
                });

        }


        public void OnUpdateInnerFire(double value)
        {
            innerFire = value;

        }


        //修改心灵之火数量
        public void RpcUpdateInnerFire(double amount)
        {
            thrift.sts.DoubleChanged respon = null;
            //发起网络通信
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
                 () =>
                 {
                     respon = RpcServer.Instance.Player_client.ChangeIF(userId, amount);
                 },
                () =>
                {
                    if (respon != null)
                        OnUpdateInnerFire(respon.CurrVaule);
                });
        }

        //改变技能点回调
        private void ChangeSkillPointCallback(CurrencyChanged respon)
        {

            Debug.Log("skillPoint changed " + respon.ToString());
            userData.skillPoint = Convert.ToInt32(respon.CurrVaule);
            SaveDataManager.Instance.Save();

        }

        //技能
        public void ChangeSkillPoint(int amount)
        {

            CurrencyChanged respon = null;
            //发起网络通信
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
                 () => { respon = RpcServer.Instance.Client.ChangeSkillPoint(userId, amount); },
                () => { ChangeSkillPointCallback(respon); });
        }



        List<Materials> waitForAddMaterialList = new List<Materials>();
        List<Consumable> waitForAddConsumableList = new List<Consumable>();


        public void GetGiftCode(string code)
        {
            GiftCodeRewardBack resopon = null;
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
             () => { resopon = RpcServer.Instance.Player_client.GetGiftCode(userId, code); },
             () =>
             {
                 if (resopon.Succ)
                     Debug.Log("领取礼包成功");
                 else
                     Debug.Log("领取礼包失败 " + resopon.Code);
             },
             "GetGifCode");
        }

        //获得道具
        public void AcquireItem(Item item, int amount = 1, Action callback = null)
        {
            Tools.Print("AcquireItem " + item.tid, Tools.Programmer.Dashi);
            if (item == null) return;
            if (item.amount == 0) item.amount = amount;

            switch (item.type)
            {
                case Item.Type.Equipment:
                    RpcAddEquipment((item as Equipment).toDbData(), callback);
                    break;
                case Item.Type.Material:
                case Item.Type.Consumable:
                case Item.Type.SealEquipment:
                case Item.Type.Quests:
                    RpcAddItem(CreateThriftItem(item));
                    break;
            }
            EventManager.Instance.RaiseEvent("更新货币显示");
        }
        public void RpcAddEquipment(thrift.sts.Equipment new_equipment, Action callback = null)
        {
            //Tools.Print($"<color=orange>装入data装备{new_equipment.ToString()}</color>", Tools.Programmer.Dashi);
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
              () => { new_equipment.DbId = RpcServer.Instance.Equip_client.AddEquipment(userId, new_equipment); },
              () =>
              {
                  OnAddEquipment(new_equipment);
                  if (callback != null)
                      callback?.Invoke();
              });
        }

        public void UpdateCarriageEquipment(List<long> heroUdid = null, List<thrift.sts.Equipment> Equipments = null)//更新装备，脱掉对应角色的装备
        {
            if (Equipments != null)
            {
                for (int i = 0; i < Equipments.Count; i++)
                {
                    if (GetEquipmentDataById(Equipments[i].DbId) != null)
                    {
                        equipmentDataDic[Equipments[i].DbId] = Equipments[i];
                    }
                }
            }

            if (heroUdid != null)
            {
                for (int i = 0; i < heroInfoList.Count; i++)//先脱装，在更新英雄列表
                {
                    for (int z = 0; z < heroUdid.Count; z++)
                    {
                        if (heroInfoList[i].udid == heroUdid[z])
                        {
                            Sts.Model.Equipment equip = null;
                            for (int j = 0; j < heroInfoList[i].equipments.Length; j++)//
                            {
                                if (heroInfoList[i].equipments[j] != null)
                                {
                                    foreach (var affix in heroInfoList[i].equipments[j].Affixs)
                                    {
                                        if (affix.skillID != "0")
                                        {
                                            var character = BattleGameManager.instance.gameRule.CharacterManager.getCharacterByTplID(heroInfoList[i].id);
                                            if (character != null)
                                            {
                                                var playerUnit = character.playerUnit;
                                                Client.ClientInterface.RemovePlayerSkill(playerUnit, affix.skillID);
                                            }
                                        }
                                    }
                                    equip = heroInfoList[i].equipments[j];
                                }
                                //
                                heroInfoList[i].equipments[j] = null;
                                if (equip != null)
                                    inventoryModel.ChangeEquipment(equip, 0);
                            }
                            //更新英雄装备数据
                            heroInfoList[i].data.EquipSkillsID = new List<string>();
                            break;
                        }
                    }
                }
            }

        }

        //获得装备
        public Equipment OnAddEquipment(thrift.sts.Equipment data)
        {
            //if (inventoryModel.equipmentList.Count >= inventoryModel.equipmentCapacity)
            //{
            //    string fullEquipmentString = string.Format(I18N.instance.getValue("^_fullEquipment"));
            //    UIGlobal.instance.SendBubble(fullEquipmentString);
            //    //UIGlobal.instance.SendBubble("装备已满");
            //    //print("背包已满");
            //    return false;
            //}
            int max = 0;
            foreach (var equ in inventoryModel.equipmentList_Equipped)
            {
                if (equ.dbId == data.DbId)//如果背包有这件装备了，就不执行添加操作
                    return null;
                if (max < equ.quality + 1)
                    max = equ.quality + 1;
            }
            foreach (var equ in inventoryModel.equipmentList)
            {
                if (equ.dbId == data.DbId)//如果背包有这件装备了，就不执行添加操作
                    return null;
                if (max < equ.quality + 1)
                    max = equ.quality + 1;
            }

            UpdateEquipment(data);
            Equipment equip = inventoryModel.OnAddEquipment(data);

            /* int id1 = TplManager.Instance.GetEquipmentByID(equip.tid).affix_default;
             string att = "";
             float att2 = 0;
             if (id1 != 0)
             {
                 int id2 = int.Parse(TplManager.Instance.GetEquipmentAffixPlaneByID(id1).typeList[0]);
                 string[] idList = TplManager.Instance.GetEquipmentAffixTypeByID(id2).affixs;
                 for(int i=0;i<idList.Length;i++)
                 {
                     int id3 = int.Parse(TplManager.Instance.GetEquipmentAffixTypeByID(id2).affixs[i]);
                     att = TplManager.Instance.GetEquipmentAffixByID(id3).attr_1;
                     att2 = float.Parse(TplManager.Instance.GetEquipmentAffixByID(id3).min_1[0]);
                     equip.basicAttribute.SetProperyData(att, att2);
                 }
             }*/

            ////成就
            //EventManager.Instance.RaiseEvent("AddAchievement", new ArrayList() { (int)70005, (float)1 });
            if (equip != null)
            {
                if (equip.quality + 1 > max)
                    EventManager.Instance.RaiseEvent("增加主线任务进度", new ArrayList() { Type_MainTaskID.一件装备的品质达到, 0, equip.quality + 1 });
            }

            EventManager.Instance.RaiseEvent("更新左下角提示特效");
            EventManager.Instance.RaiseEvent("获得新的装备");
            //print("获得装备" + eItem.name + "个");
            return equip;
        }

        //获得封印物
        //bool AcquireSealEquipment(SealEquipment eItem)
        //{
        //    inventoryModel.AddItem(eItem);
        //    //print("获得装备" + eItem.name + "个");
        //    return true;
        //}

        //获得材料 需要服务端化 AddItem接口
        //bool AcquireMaterial(Materials mItem)
        //{
        //    int remain = mItem.amount;
        //    waitForAddMaterialList.Clear();

        //    //第一遍先计算
        //    foreach (var m in inventoryModel.materialList)
        //    {
        //        //存在就
        //        if (m.tid == mItem.tid)
        //        {
        //            remain = m.Overflow(remain);
        //            waitForAddMaterialList.Add(m);
        //            if (remain <= 0)
        //                break;
        //        }
        //    }

        //    //需要额外添加的格子
        //    int extraGrid = Mathf.CeilToInt((float)(remain < 0 ? 0 : remain) / (float)mItem.stack);
        //    //print("extraGrid " + extraGrid);
        //    if (inventoryModel.materialList.Count + extraGrid > inventoryModel.materialCapacity)
        //    {
        //        string fullMaterialString = string.Format(I18N.instance.getValue("^_fullMaterial"));
        //        UIGlobal.instance.SendBubble(fullMaterialString);
        //        //UIGlobal.instance.SendBubble( "材料已满");
        //        //print("背包已满");
        //        return false;
        //    }

        //    //第二遍，操作

        //    //叠加操作
        //    remain = mItem.amount;
        //    foreach (var m in waitForAddMaterialList)
        //    {
        //        int overflow = m.Overflow(remain);
        //        if (overflow > 0)
        //        {
        //            int amount = remain - overflow;
        //            remain -= amount;
        //            m.amount += amount;
        //        }
        //        else
        //        {
        //            m.amount += remain;
        //        }
        //    }

        //    //额外添加
        //    for (int i = 0; i < extraGrid; i++)
        //    {
        //        mItem = mItem.clone;
        //        remain = remain % mItem.stack;
        //        mItem.amount = (i == extraGrid - 1 && remain > 0) ? remain : mItem.stack;
        //        inventoryModel.materialList.Add(mItem);
        //    }
        //    return true;

        //}




        ////测试提交物品接口 回调
        //private void AddItemCallback(int succCount)
        //{
        //        Debug.Log("增加道具成功 " + succCount);

        //}

        ////测试提交物品接口
        //public void AddMaterialRpc(MaterialData material)
        //{
        //    Debug.Log("向服务端提交 addItem");
        //    List<thrift.sts.Item> list = new List<thrift.sts.Item>();
        //    thrift.sts.Item item = new thrift.sts.Item();
        //    item.Tid = material.tid;
        //    item.Amount = material.amount;
        //    item.Type = 2;
        //    list.Add(item);

        //    int succCount = 0;
        //    RpcServer.Instance.netServerControll.CallRpcRemoteThread(
        //        () => { succCount = RpcServer.Instance.Client.SubmitItemDataToServer(userId, list,null); },
        //        ()=> { AddItemCallback(succCount); });
        //}

        //public void AddConsumableRpc(ConsumableData consumable)
        //{

        //}



        //获得消耗品 需要服务端话 AddItem
        //bool AcquireConsumable(Consumable cItem)
        //{
        //    int remain = cItem.amount; Debug.Log(remain);
        //    waitForAddConsumableList.Clear();

        //    //第一遍先计算
        //    foreach (var c in inventoryModel.consumableList)
        //    {
        //        //存在就
        //        if (c.tid == cItem.tid)
        //        {
        //            remain = c.Overflow(remain);
        //            waitForAddConsumableList.Add(c);
        //            if (remain <= 0)
        //                break;
        //        }
        //    }

        //    //需要额外添加的格子
        //    int extraGrid = Mathf.CeilToInt((float)(remain < 0 ? 0 : remain) / (float)cItem.stack);
        //    //print("extraGrid " + extraGrid);
        //    if (inventoryModel.consumableList.Count + extraGrid > inventoryModel.consumableCapacity)
        //    {
        //        string fullConsumableString = string.Format(I18N.instance.getValue("^_fullConsumable"));
        //        UIGlobal.instance.SendBubble(fullConsumableString);
        //        //UIGlobal.instance.SendBubble( "消耗品已满");
        //        //print("背包已满");
        //        return false;
        //    }

        //    //第二遍，操作

        //    //叠加操作
        //    remain = cItem.amount;
        //    foreach (var c in waitForAddConsumableList)
        //    {
        //        int overflow = c.Overflow(remain);
        //        if (overflow > 0)
        //        {
        //            int amount = remain - overflow;
        //            remain -= amount;
        //            c.amount += amount;
        //        }
        //        else
        //        {
        //            c.amount += remain;
        //        }
        //    }

        //    //额外添加
        //    for (int i = 0; i < extraGrid; i++)
        //    {
        //        cItem = cItem.clone;
        //        remain = remain % cItem.stack;
        //        cItem.amount = (i == extraGrid - 1 && remain > 0) ? remain : cItem.stack;
        //        inventoryModel.consumableList.Add(cItem);
        //    }

        //    //print("获得材料" + cItem.name + cItem.amount + "个");

        //    return true;

        //}

        //public int 法力之尘数量()
        //{
        //    int meterialAmount = 0;
        //    foreach (var data in userData.materialDataList)
        //    {
        //        if (data.id == 301)
        //            meterialAmount = data.amount;
        //    }
        //    return meterialAmount;
        //}


        ////获取AgentTypeId
        //public Dictionary<ENavAgents, int> AgentTypeDic = new Dictionary<ENavAgents, int>();

        //public int 获取AgentsId(ENavAgents EAgent)
        //{
        //    if (AgentTypeDic.Count == 0)
        //    {
        //        var count = NavMesh.GetSettingsCount();           
        //        for (var i = 0; i < count; i++)
        //        {
        //            var id = NavMesh.GetSettingsByIndex(i).agentTypeID;
        //            var name = NavMesh.GetSettingsNameFromID(id);
        //            AgentTypeDic[(ENavAgents)Enum.Parse(typeof(ENavAgents), name)] = id;//string 转 Enum
        //        }
        //    }

        //    if (AgentTypeDic.ContainsKey(EAgent))
        //        return AgentTypeDic[EAgent];
        //    else
        //        return 0;

        //}

        //如果amount>=持有数则全部删除time  关键方法 ChangeItemAmount
        public void RemoveItemByID(int tid, int amount, Item.Type itemType = Item.Type.Material)
        {
            thrift.sts.Item back_item = null;
            //等待网络通信协程
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
                () => { back_item = RpcServer.Instance.Item_client.ChangeItemAmount(userId, tid, -amount, (int)itemType); },
                () =>
                {
                    OnAddOrChangeItem(back_item);
                });

        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public Item OnAddOrChangeItem(thrift.sts.Item data)
        {
            if (data == null) return null;
            //更新data数据
            UpdateItem(data);
            //更新页面model数据
            return inventoryModel.UpdateItemsList(data);
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="_equip"></param>
        /// <returns></returns>
        public Equipment RpcUpdateEquip(thrift.sts.Equipment _equip)
        {
            Debug.Log(string.Format("<color=#00B1FF>_equip.HeroId:{0}</color>", _equip.HeroId));
            var equipList = _equip.HeroId == 0 ? inventoryModel.equipmentList : inventoryModel.equipmentList_Equipped;
            //
            for (int i = 0; i < equipList.Count; i++)
            {
                var curEquip = equipList[i];
                if (curEquip.dbId == _equip.DbId)
                {
                    var rpcEquip = inventoryModel.OnAddEquipment(_equip, false);
                    if (_equip.HeroId == 0)
                    {
                        inventoryModel.equipmentList[i] = rpcEquip;
                    }
                    else
                    {
                        inventoryModel.equipmentList_Equipped[i] = rpcEquip;
                    }
                    return rpcEquip;
                }
            }
            return null;
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="respon"></param>
        /// <param name="itemID"></param>
        public void OnGuideConsumableChest(OnUseConsumableRespon respon, int itemID)
        {
            if (respon.Items != null)
            {
                foreach (var data in respon.Items)
                {
                    Item item = OnAddOrChangeItem(data);
                    EventManager.Instance.RaiseEvent("宝箱获得道具", item);
                    UIGlobal.instance.SendBubble(string.Format("{0}*{1} 已获得", item.name, data.Amount));
                }
            }

            if (respon.Equipments != null)
            {
                foreach (var data in respon.Equipments)
                {
                    Equipment equipment = OnAddEquipment(data);
                    EventManager.Instance.RaiseEvent("宝箱获得道具", equipment);
                    //UIGlobal.instance.SendBubble(string.Format("{0}*{1} 已获得", equipment.name, 1));
                }
            }
            //EventManager.Instance.RaiseEvent("增加爵位任务进度", new ArrayList() { Type_GuideTaskID.开启普通宝箱1次 });
            //  DataManager.Instance.AddGuideTaskValue(Type_GuideTaskID.开启普通宝箱1次);
            EventManager.Instance.RaiseEvent("开启宝箱", itemID);
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="respon"></param>
        /// <param name="chestId"></param>
        /// <param name="notCargo"></param>
        public void OnUseConsumableChest(OnUseConsumableRespon respon, int chestId, bool notCargo = false)
        {
            TplItemChest itemChest = TplManager.Instance.GetItemChestByID(chestId);
            //
            if (respon.Items != null)
            {
                foreach (var data in respon.Items)
                {

                    Item item = OnAddOrChangeItem(data);

                    if (!notCargo)
                        EventManager.Instance.RaiseEvent("宝箱获得道具", item);
                    //UIGlobal.instance.SendBubble(string.Format("{0}*{1} 已获得", item.name, data.Amount));
                }
            }
            //
            if (respon.Equipments != null)
            {
                List<Item> equipList = new List<Item>();
                foreach (var data in respon.Equipments)
                {
                    Equipment equipment = OnAddEquipment(data);
                    if (!notCargo)
                        equipList.Add((Item)equipment);
                    // UIGlobal.instance.SendBubble(string.Format("{0}*{1} 已获得", equipment.name, 1));
                }
                EventManager.Instance.RaiseEvent("宝箱获得装备", equipList);
            }
            //
            if (!notCargo)
            {
                EventManager.Instance.RaiseEvent("开启宝箱", itemChest.chestID);
            }
        }
        /// <summary>
        /// 消耗品-道具宝箱 使用规则
        /// </summary>
        /// <param name="_id"></param>
        /// <param name="num"></param>
        /// <param name="action"></param>
        private void RpcUseConsumableChest(int _id, int _num, Action action)
        {
            //获取数据
            TplItemChest tpl = TplManager.Instance.GetItemChestByID(_id);
            //安检

            //
            bool notCargo = tpl.stack != 0;
            //
            UseConsumableChest(_id, _num, notCargo, action);
            //更新主界面背包红点
            EventManager.Instance.RaiseEvent("UI_BattleCommonView_Update_Packsack_RedPoint");
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="_id"></param>
        /// <param name="_num"></param>
        /// <param name="_notCargo"></param>
        /// <param name="action"></param>
        void UseConsumableChest(int _id, int _num, bool _notCargo, Action action)
        {
            //
            OnUseConsumableRespon respon = null;
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
                () => { respon = RpcServer.Instance.Item_client.BatUseConsumableChest(userId, _id, _num); },
                () =>
                {
                    //

                    //

                    //
                    RpcAwardInfo awardInfo = new RpcAwardInfo();
                    awardInfo.itemId = new List<int>();
                    awardInfo.itemType = new List<int>();
                    awardInfo.itemNum = new List<double>();
                    //
                    if (_notCargo)
                    {
                        UIManager.Instance.OpenUI(UIModel.UI_AwardPanel);
                        foreach (var item in respon.Items)
                        {
                            if (item.Tid != _id)
                            {
                                awardInfo.itemId.Add(item.Tid);
                                awardInfo.itemType.Add(item.Type);
                                awardInfo.itemNum.Add(item.Amount - (int)GetAmountFromItemTpl(item.Type, item.Tid));
                            }
                        }
                        UI_AwardPanel.instance.Init(awardInfo);
                    }
                    OnUseConsumableChest(respon, _id, _notCargo);

                    //
                    if (action != null)
                    {
                        action.Invoke();
                    }
                });
        }
        /// <summary>
        /// 消耗品-加成道具 使用规则
        /// </summary>
        /// <param name="_id"></param>
        /// <param name="_num"></param>
        /// <param name="action"></param>
        void RpcUseIncreaseItem(int _id, int _num, Action action)
        {
            //手动扣除道具
            RemoveItemByID(_id, _num, Item.Type.Consumable);
            //
            Consumable con = TplManager.Instance.GetConsumableByID(_id);
            TplIncreaseItem increaseItem = TplManager.Instance.GetIncreaseItemByID(con.tid);
            IncreaseData incr = new IncreaseData(con.tid);
            bool isKeeping = false;
            double lastTime = 0;
            //
            for (int i = 0; i < increaseDataList.Count; i++)
            {
                var item = increaseDataList[i];
                if (item.type == increaseItem.increaseType)
                {
                    if (item.id > increaseItem.itemId)
                    {
                        UIGlobal.instance.SendBubble("同类加成有更高级的效果正在持续中！");
                        return;
                    }
                    else
                    {
                        //
                        if (item.id == increaseItem.itemId)
                        {
                            lastTime = TimeManager.Instance.F_Difference_Dou(DateTime.Now, new DateTime(item.overTime), -1);
                            //
                            item.id = increaseItem.itemId;
                            isKeeping = true;
                            item.num += _num;
                            item.overTime = TimeManager.Instance.F_GetTimeToLong(increaseItem.cd * _num, 1, item.overTime);
                            //
                            incr = item;
                        }
                        else
                        {
                            increaseDataList.RemoveAt(i);
                        }
                    }
                    break;
                }
            }
            //
            if (!isKeeping)
            {
                incr.type = increaseItem.increaseType;
                incr.num = _num;
                incr.overTime = TimeManager.Instance.F_GetTimeToLong(increaseItem.cd * _num);
                increaseDataList.Add(incr);
            }
            EventManager.Instance.RaiseEvent("更新玩家状态栏");
            //EventManager.Instance.RaiseEvent("服务器通信", defaultSkill);
            long keepTime = (long)(lastTime + increaseItem.lasted * 60000 * _num);
            BattleGameManager.instance.ChangeGlobalVariable(increaseItem.buffName, keepTime);
            //EventManager.Instance.RaiseEvent("ChangeGlobalVariable", new ArrayList { increaseItem.buffName, keepTime });
            EventManager.Instance.RaiseEvent("服务器通信", "使用" + con.name);
            UIGlobal.instance.SendBubble("使用了" + con.name);
            //SaveDataManager.Instance.Save();
        }
        /// <summary>
        /// 消耗品-即时道具 使用规则
        /// </summary>
        /// <param name="_id"></param>
        /// <param name="_num"></param>
        /// <param name="action"></param>
        void RpcUseDirectItem(int _id, int _num, Action action)
        {
            TplDirectItem directItem = TplManager.Instance.GetDirectItemByID(_id);
            switch (directItem.cType_d)
            {
                case TplDirectItem.DirectItemType.science:
                    double amount = autoSpawnNum * 60 * directItem.time;
                    if (amount > 0)
                    {
                        //手动扣除道具
                        RemoveItemByID(_id, _num, Item.Type.Consumable);
                        List<Item> itemList = null;
                        EventManager.Instance.RaiseEvent("使用即时道具", new ArrayList { amount, (long)0, (long)0, itemList });
                        UIGlobal.instance.SendBubble("使用了" + directItem.name);
                    }
                    else
                    {
                        UIGlobal.instance.SendBubble("金币产量为0时不能使用！");
                    }
                    break;
                case TplDirectItem.DirectItemType.autoEarnings:
                    if (_num == 0)
                    {
                        return;
                    }
                    //
                    GiftCodeRewardBack respon = null;
                    RpcServer.Instance.netServerControll.CallRpcRemoteThread(
                        () => { respon = RpcServer.Instance.Item_client.GetConsumablesRewards(userId, _id, _num); },
                        () =>
                        {
                            if (respon != null)
                            {
                                Debug.LogError($"-----------respon.RewardStr-----------{respon.RewardStr}----------------");
                                if (respon.RewardObj.Items != null)
                                {
                                    for (int i = 0; i < respon.RewardObj.Items.Count; i++)
                                    {
                                        if (_id == respon.RewardObj.Items[i].Tid)
                                        {
                                            OnAddOrChangeItem(respon.RewardObj.Items[i]);
                                        }
                                    }
                                }
                                //
                                if (respon.RewardObj.Currencys != null)
                                    ChangeCurrencyListCallback(respon.RewardObj.Currencys);
                                ParseRewardStrByServer(respon.RewardStr);
                            }
                            action?.Invoke();
                        });
                    break;
            }
        }
        /// <summary>
        /// 消耗品-灵魂石 使用规则
        /// </summary>
        /// <param name="_id"></param>
        /// <param name="_num"></param>
        /// <param name="action"></param>
        void RpcUseConsumable_SoulStone(int _id, int _num, Action action = null)
        {
            //安检
            TplSoulstone tpl = TplManager.Instance.GetTplSoulstoneById(_id);
            UseSoulstoneRespon respon = null;
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
                () => { respon = RpcServer.Instance.Item_client.GetSoulstoneReward(DataManager.Instance.userId, _id, _num * tpl.onceCost, UI_TeamEditModel.GetCurrentUnlockTeam()); },
                () =>
                {
                    DataManager.Instance.OnAddOrChangeItem(respon.Items);
                    DataManager.Instance.CallBack_AddNewHeroData(respon.HeroDataList);
                    DataManager.Instance.HeroInfoListLoadData();
                    var udidList = new List<long>();
                    foreach (var hero in respon.HeroDataList)
                    {
                        udidList.Add(hero.Udid);
                    }
                    UIManager.Instance.OpenUI(UIModel.UI_AwardPanel);
                    RpcAwardInfo awardInfo = new RpcAwardInfo();
                    awardInfo.heroList = udidList;
                    UI_AwardPanel.instance.Init(awardInfo);

                    //自动上阵 重新拉取编队信息
                    FormationModel.RPCGetHeroTeamDataByTypeList(new List<int>((int)FormationTypes.basicPlot), () =>
                    {
                        EventManager.Instance.RaiseEvent("BattleCommon_英雄卡更新");
                        EventManager.Instance.RaiseEvent("章节英雄编队修改");
                        EventManager.Instance.RaiseEvent("更新科技界面小红点");
                    });
                    action?.Invoke();

                });
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="_id"></param>
        /// <param name="action"></param>
        void RpcUseConsumable_HeadFrame(int _id, Action action = null)
        {
            UseConsumableHeadFrameRespon respon = null;
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
        () => { respon = RpcServer.Instance.Item_client.UseConsumableHeadFrame(userId, _id); },
        () =>
        {
            if (respon.Succ)
            {
                if (respon.FrameIds != null)
                    DealHeadFrameRecharge(respon.FrameIds);
                if (respon.Item != null)
                {
                    OnAddOrChangeItem(respon.Item);
                }
            }
        });
        }
        /// <summary>
        /// 行动力宝箱
        /// </summary>
        /// <param name="_id"></param>
        /// <param name="action"></param>
        void RpcUseConsumable_ActionPoint(int _id, int amount, Action action = null)
        {
            UseConsumablePointRespon respon = null;
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
        () => { respon = RpcServer.Instance.Actionpoint_client.UseConsumablePoint(userId, _id, amount); },
        () =>
        {
            if (respon.Succ)
            {
                int nums = TplManager.Instance.GetActionPointById(_id).content * amount;
                List<double> num = new List<double>();
                num.Add(nums);
                currentActionPoint = respon.CurrentActionPoint;
                if (respon != null && respon.Items != null && respon.Items.Count > 0)
                {
                    for (int i = 0; i < respon.Items.Count; i++)
                        OnAddOrChangeItem(respon.Items[i]);
                }
                UIManager.Instance.OpenUI(UIModel.UI_AwardPanel);
                RpcAwardInfo awardInfo = new RpcAwardInfo();
                awardInfo.isActionPoint = true;
                awardInfo.itemNum = num;
                UI_AwardPanel.instance.Init(awardInfo);
                action?.Invoke();
            }
        });
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="firstRecharge"></param>
        public void DealHeadFrameRecharge(string firstRecharge)//处理服务端返回的头像框列表
        {
            if (firstRecharge == "varchar" || firstRecharge == "" || firstRecharge == null)
            {
                playerIconB = new List<int>();
                playerIconB.Add(6100);
                return;
            }
            playerIconB = new List<int>();
            string[] _string = firstRecharge.Split('|');
            for (int i = 0; i < _string.Length; i++)
            {
                playerIconB.Add(int.Parse(_string[i]));
            }
        }
        /// <summary>
        /// 服务端 使用消耗品（包含实际使用效果）
        /// </summary>
        /// <param name="_id"></param>
        /// <param name="_index"></param>
        /// <param name="action"></param>
        /// <returns></returns>
        public void UseConsumable(int _id, int _num = 1, Action action = null)
        {
            Consumable con = TplManager.Instance.GetConsumableByID(_id);
            switch (con.cType)
            {
                case Consumable.CType.Chest:
                    //服务端使用宝箱
                    RpcUseConsumableChest(_id, _num, action);
                    break;
                case Consumable.CType.Increase:
                    RpcUseIncreaseItem(_id, _num, action);
                    break;
                case Consumable.CType.Direct:
                    RpcUseDirectItem(_id, _num, action);
                    break;
                case Consumable.CType.SoulStone:
                    RpcUseConsumable_SoulStone(_id, _num, action);
                    break;
                case Consumable.CType.HeadFrame:
                    RpcUseConsumable_HeadFrame(con.tid);
                    break;
                case Consumable.CType.ActionPoint:
                    RpcUseConsumable_ActionPoint(_id, _num, action);
                    break;
                case Consumable.CType.EquipFragment:
                    //传入参数不同 单独调用
                    break;
                default:
                    UIGlobal.instance.SendBubble("物品还未配置使用策略，没有效果！");
                    break;
            }
        }



        //修改玩家技能信息
        public void ChangeSkillData(int _index, int _lastId, int _newId)
        {
            if (_newId != 0)
            {
                for (int i = 0; i < skillData.Length; i++)
                {
                    if (skillData[i] == _newId)
                        skillData[i] = _lastId;
                }
            }
            skillData[_index] = _newId;
            SaveSkillData();
            EventManager.Instance.RaiseEvent("更新战斗界面技能栏");
        }
        //保存玩家技能信息
        public void SaveSkillData()
        {
            for (int i = 0; i < skillData.Length; i++)
            {
                userData.skillData[i] = skillData[i];
            }
        }
        //获取点击技能命中时能获得的金币数量
        public void GetHitSpawnNum()
        {
            float beasNum = 1;
            float growNum = 0;
            float critNum = 0.05f;
            float critbonusNum = 2f;

            List<TplScienceTech> tpl = TplManager.Instance.GetScienceTech();
            foreach (var item in tpl)
            {
                if (scienceData.GetLevel(item.id) > 0)
                {
                    if (item.upType == 1)
                        beasNum += item.upNum;
                    else if (item.upType == 2)
                    {
                        float temp = (scienceData.GetGrowNum(item.id) * item.upNums[0]);
                        if (item.upNums[1] > 0)
                            temp = temp > item.upNums[1] ? item.upNums[1] : temp;
                        growNum += temp;
                    }
                    else if (item.upType == 3)
                        critNum += item.upNum;
                    else if (item.upType == 4)
                        critbonusNum += item.upNum;
                }
            }

            hitSpawnNum = (long)(beasNum + growNum);
            hitCritNum = critNum;
            hitCritbonuNum = critbonusNum;
        }
        //获取已解锁的科技数量
        public int GetunlockScienceNum()
        {
            int sum = 0;
            foreach (var item in scienceData.scienceLevel)
            {
                if (item > 0)
                {
                    sum += 1;
                }
            }
            return sum;
        }

        //获取当前关卡数
        public int GetStage()
        {
            int stage = 1;
            for (int i = 0; i < basicPlotData.PassInfo.CurChapter; i++)
            {
                stage += TplManager.Instance.GetBasicPlotChapterByIndex(i).commonId.Length;
            }
            stage += basicPlotData.PassInfo.CurLevel;
            return stage;
        }
        //获取历史最高关卡数
        public int GetMaxStage()
        {
            int stage = 1;
            if (basicPlotData.PassInfo.TopChapter == 0 && basicPlotData.PassInfo.TopLevel == 0 && (curBasicPlotBattleID == 20001 || curBasicPlotBattleID == 10001))
            {
                stage = 0;
            }
            for (int i = 0; i < MaxChapter; i++)
            {
                stage += TplManager.Instance.GetBasicPlotChapterByIndex(i).commonId.Length;
            }
            stage += MaxLevel;
            return stage;
        }
        //根据一个stage获取chapter和level
        public int[] GetChapterAndLevelByStage(int _stage)
        {
            int[] info = new int[] { 1, 1 };
            //
            foreach (var chapter in TplManager.Instance.GetBasicPlotChapterList())
            {
                if (_stage > chapter.commonId.Length)
                {
                    info[0] += 1;
                    _stage -= chapter.commonId.Length;
                }
                else
                {
                    info[1] += _stage - 1;
                    break;
                }
            }
            return info;
        }

        /// <summary>
        /// 根据关卡数获取章节、地点、区域
        /// </summary>
        /// <param name="stage"></param>
        /// <returns></returns>
        public List<int> GetChapterAreaLevelByStage(int stage)
        {
            List<int> info = new List<int>();
            int chapter = (DataManager.Instance.GetChapterAndLevelByStage(stage))[0];//总区域数
            int map = (int)MapDatamanager.instance.GetLocationTplByAreaNum(chapter).chapterMapNum + 1;//当前章节
            int realChapter = MapDatamanager.instance.GetLocationNum(chapter); //当前地点
            int lastChapter = MapDatamanager.instance.GetChapterAllArena(map-1);
            int arenaChapter = realChapter - lastChapter;
            int level = chapter - MapDatamanager.instance.ReturnAllCount(realChapter);//当前区域

            info.Add(map);
            info.Add(arenaChapter);
            info.Add(level);
            return info;
        }

        //获取当前转生奖励 未上服务端
        public double GetReincarnationAward(int _idnex)//0=reGold,1=reExp
        {
            //int id = curExploreBattle.id >= 20000 ? curExploreBattle.id - 10000 : curExploreBattle.id;

            int level = GetStage() + 10000;
            int id = level >= 20000 ? level - 10000 : level;

            TplBattle tpl = TplManager.Instance.GetBattleByIDTest(id);
            double award = 0;
            if (_idnex == 0)
            {
                award = (tpl.reGold > Addition.reGold ? tpl.reGold : Addition.reGold);
            }
            else if (_idnex == 1)
            {
                for (int i = 10001 + GetMaxTotalLevel(ReChapter, ReLevel); i <= id; i++)//for (int i = 1001; i <= 1001 + GetMaxTotalLevel(ReChapter, ReLevel); i++) //id
                {
                    TplBattle tplbattle = TplManager.Instance.GetBattleByIDTest(i);
                    award += tplbattle.diamond;
                }
            }


            //double award = _idnex == 0 ? : tpl.reExp;

            if (award % 0.01f != 0)
                award = double.Parse(award.ToString("F2")/*.Substring(0,5)*/);
            //如果当前的关卡没有大于最大关卡经验奖励为0
            if ((ReChapter >= basicPlotData.PassInfo.CurChapter || (ReLevel > basicPlotData.PassInfo.CurLevel)) && _idnex != 0 && reNum >= 1)
            {
                return 0;
            }
            return award;
        }


        /// <summary>
        /// 获取当前关卡的挂机灵魂经验产生速率
        /// </summary>
        /// <returns></returns>
        public float GetAutoBookExpAddition()
        {
            return Addition.bookExp_auto * Addition.bookExp;
        }
        /// <summary>
        /// 获取当前关卡的挂机潜能经验产生速率
        /// </summary>
        /// <returns></returns>
        public float GetAutoReExpSpeed()
        {
            int topChapter = basicPlotData.PassInfo.TopChapter;
            TplBasicPlotChapter tpl = TplManager.Instance.GetBasicPlotChapterByIndex(topChapter);
            float award = tpl.autoAwardSpeed * Addition.reExp;
            return award;
        }

        //根据索引读取货币数量
        public double GetTargetCurrency(int _id)
        {
            switch (_id)
            {
                case (int)TplCurrency.Currency.钻石:
                    return sacredCrystal;
                case (int)TplCurrency.Currency.金币:
                    return gold;
                case (int)TplCurrency.Currency.水晶:
                    return crystal;
                case (int)TplCurrency.Currency.灵魂经验:
                    return bookExp;
                case (int)TplCurrency.Currency.潜能经验:
                    return reExp;
                case (int)TplCurrency.Currency.魔法石:
                    return magicStone;
                case (int)TplCurrency.Currency.心灵之火:
                    return innerFire;
                case (int)TplCurrency.Currency.幸运币:
                    return luckyStone;
                case (int)TplCurrency.Currency.粉尘:
                    return ManaDust;
                case (int)TplCurrency.Currency.迷宫硬币:
                    return mazeCoin;
                case (int)TplCurrency.Currency.荣誉点数:
                    return honorPoint;
                case (int)TplCurrency.Currency.绝境徽章:
                    return fortressPoint;
                case (int)TplCurrency.Currency.强化石:
                    return upgradeStone;
                case (int)TplCurrency.Currency.强化结晶:
                    return upgradeCrystal;
                case (int)TplCurrency.Currency.公会币:
                    return guildCoin;
                case (int)TplCurrency.Currency.行动力:
                    return currentActionPoint;
                case (int)TplCurrency.Currency.阅历:
                    return experience;
                default:
                    Debug.LogError($"{_id}货币类型错误!");
                    return 0;
            }
        }



        /// <summary>
        /// 根据索引写入货币数量 旧的原由客户端方法 
        /// 服务端回调的货币改动使用 ChangeCurrencyListCallback
        /// 配置表数据统一按此索引读取修改数据，方便配置  资源类：神石，金币，水晶，灵魂经验，潜能经验，魔法石 (Currency 枚举类型)
        /// </summary>
        // 2020/4/26 该方法曾用于客户端向服务端申请数据修改，优化后所有精确的数据修改不再需要客户端发起，所以该方法将逐步废弃
        // 后续功能禁止使用该方法，且该方法后续将陆续取消先前的调用
        public void SetTargetCurrency(int _id, double _amount, int _type = 0)//type=0不适用加成，type=1适用通用加成，type=2适用挂机加成，type=2适用杀怪加成
        {
            if (_amount == 0)
                return;
            TplCurrency tplCurr = TplManager.Instance.GetCurrencyById(_id);
            Debug.LogError("----------------------------粉尘时代" + tplCurr.currType);
            switch (tplCurr.currType)
            {
                case TplCurrency.Currency.钻石:
                    Debug.LogError("客户端  钻石赋值！");
                    RpcChangeSacredCrystal((long)_amount);
                    break;
                //金币变量增长。仍然使用本方法
                case TplCurrency.Currency.金币:
                    //Debug.LogError("客户端  金币赋值！");
                    ChangeGold(_amount);
                    break;
                case TplCurrency.Currency.水晶:
                    Debug.LogError("客户端 水晶赋值！");
                    crystal += (long)_amount;
                    break;
                case TplCurrency.Currency.灵魂经验:
                    ChangeBookExp((int)_amount);
                    Debug.LogError("客户端 灵魂经验！ 赋值");
                    //bookExp = (int)_amount;
                    break;
                case TplCurrency.Currency.潜能经验:
                    Debug.LogError("客户端 潜能经验！ 赋值");
                    RpcUpdateReExp(_amount);
                    break;
                case TplCurrency.Currency.魔法石:
                    Debug.LogError("客户端 魔法石！ 赋值");
                    ChangeMagicStone((long)_amount, _type);
                    break;
                case TplCurrency.Currency.心灵之火:
                    Debug.LogError("客户端 心灵之火！ 赋值");
                    RpcUpdateInnerFire((int)_amount);
                    break;
                case TplCurrency.Currency.幸运币:
                    Debug.LogError("客户端 幸运币！ 赋值");
                    ChangeLuckyStone((long)_amount, _type);
                    break;
                case TplCurrency.Currency.粉尘:
                    Debug.LogError("客户端 粉尘 赋值");
                    ChangeManaDust((int)_amount);
                    break;
                default:
                    Debug.LogError("货币类型错误！");
                    break;
            }
        }

        ///主要用于收到服务器回调后，更新客户端数据 由于不再需要客户端计算，amount直接填写修改后的最终数量即可
        //public void SetCurrencyByType(int _type, double _amount/*, ArrayList arr = null*/)//类型，最终数量，附加参数
        //{
        //    TplCurrency tplCurr = TplManager.Instance.GetCurrencyById(_type);
        //    switch (tplCurr.currType)
        //    {
        //        case TplCurrency.Currency.钻石:
        //            sacredCrystal = (long)_amount;
        //            break;
        //        //金币不上服务端
        //        //case TplCurrency.Currency.金币:
        //        //    gold = _amount;
        //        //    break;
        //        case TplCurrency.Currency.水晶:
        //            crystal = (long)_amount;
        //            break;
        //        case TplCurrency.Currency.灵魂经验:
        //            bookExp = (int)_amount;
        //            break;
        //        case TplCurrency.Currency.潜能经验:
        //            reExp = _amount;
        //            break;
        //        case TplCurrency.Currency.魔法石:
        //            magicStone = (long)_amount;
        //            break;
        //        case TplCurrency.Currency.心灵之火:
        //            innerFire = _amount;
        //            break;
        //        case TplCurrency.Currency.幸运币:
        //            luckyStone = (long)_amount;
        //            break;
        //        default:
        //            Debug.LogError("货币类型错误！");
        //            break;
        //    }
        //}

        //根据索引读取 影响功能开放 的条件信息
        public int GetTargetModuleInfo(int _index)
        {
            switch (_index)
            {
                case 1:
                    return bookLevel.level;
                case 2:
                    return GetStage();
                case 3:
                    return reNum;
                default:
                    Debug.LogError("索引信息错误！");
                    return int.MaxValue;
            }
        }

        /// <summary>
        /// 从将服务端获取的货币&道具变动List转换成ArrayList（适用于通用奖励横幅）
        /// </summary>
        /// <param name="_curr"></param>
        /// <param name="_item"></param>
        /// <returns></returns>
        public ArrayList RpcGetItemArrayList(List<CurrencyChanged> _curr, List<thrift.sts.Item> _item, int id = 0)
        {
            List<int> typeList = new List<int>();
            List<int> idList = new List<int>();
            List<double> numList = new List<double>();
            if (_curr != null)
            {
                foreach (var curr in _curr)
                {
                    typeList.Add(0);
                    idList.Add(curr.Type);
                    numList.Add((int)curr.ChangedValue);
                }
            }
            if (_item != null)
            {
                foreach (var item in _item)
                {
                    if (item.Tid == id)
                        continue;
                    typeList.Add(item.Type);
                    idList.Add(item.Tid);
                    numList.Add(item.Amount - DataManager.Instance.GetItemAmount(item.Tid, (Item.Type)item.Type));
                }
            }
            return new ArrayList { idList, typeList, numList };
        }

        public ArrayList RpcGetItemAwardList(string str)
        {
            List<int> typeList = new List<int>();
            List<int> idList = new List<int>();
            List<int> numList = new List<int>();
            String[] itemlen = str.Split('|');
            for (int i = 0; i < itemlen.Length; i++)
            {
                String[] cell = itemlen[i].Split('-');
                typeList.Add(int.Parse(cell[0]));
                idList.Add(int.Parse(cell[1]));
                numList.Add(int.Parse(cell[2]));
            }
            return new ArrayList { idList, typeList, numList };
        }

        //根据 功能开放 索引信息 执行对应的操作
        public void ModuleInit(int _index)
        {
            TplModule tpl = TplManager.Instance.GetTplModuleByID(_index);
            if (tpl == null) return;

            if (tpl.isOpen() && UIModel.GetUIType(_index) != null)
                UIManager.Instance.OpenUI(UIModel.GetUIType(_index));
            else
            {
                switch (tpl.type)
                {
                    case 1:
                        UIGlobal.instance.SendBubble(string.Format("灵魂等级 {0}级 后开启。", tpl.num));
                        break;
                    case 2:
                        UIGlobal.instance.SendBubble(string.Format("通过关卡 {0}关 后开启。", tpl.num));
                        break;
                    case 3:
                        UIGlobal.instance.SendBubble(string.Format("转生 {0}次 后开启。", tpl.num));
                        break;
                }
            }
        }

        //获取秘宝实际加成
        public float GetTreasureAddition(int _type)
        {
            float add = 0;
            foreach (var id in treasureData.treasureId)
            {
                var tpl = TplManager.Instance.GetTreasureById(id);
                if (tpl.effectType == _type)
                {
                    add += tpl.effectValue;
                }
            }
            return add;
        }



        //获取材料
        public Materials GetMaterialByTid(int tid)
        {
            foreach (var value in inventoryModel.materialList)
            {
                if (value.tid == tid)
                {
                    return value;
                }
            }
            return null;
        }


        public long curresntSevenrTime;
        //暂时弃用 改成通用函数
        //public void ReSetCrusadeCount(Action action)
        //{
        //    RpcServer.Instance.netServerControll.CallRpcRemoteThread(() => { curresntSevenrTime = RpcServer.Instance.Client.GetServerTime(); }, () => {
        //        //当前时间
        //        DateTime currentTime = TimeManager.Instance.GetDateByLinuxTimeStamp(curresntSevenrTime);
        //        //每日刷新时间
        //        DateTime targetDateTime = new DateTime(currentTime.Year, currentTime.Month, currentTime.Day, 8, 0, 0); //拒绝魔法数 但是我不知道写到哪 静态常数类?
        //        //次数刷新判断
        //        if (TimeManager.Instance.GetDateByLinuxTimeStamp(cursadeRefreshTime) < targetDateTime && currentTime >= targetDateTime)
        //        {
        //            cursadeRefreshTime = curresntSevenrTime;
        //            cursadeCount = 3; //拒绝魔法数 同上 
        //        }
        //        action?.Invoke();
        //    });
        //}

        /// <summary>
        /// 通用8点刷新次数
        /// </summary>
        /// <param name="lastTime">上一次刷新时间戳</param>
        /// <param name="callBack">回调</param>
        /// <param name="action">满足刷新条件事件</param>
        public void CheckRefreshTimeByServerTime(long lastTime, Action<long> action, Action callBack)
        {
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(() => { curresntSevenrTime = RpcServer.Instance.Client.GetServerTime(); }, () =>
            {
                //当前时间
                DateTime currentTime = TimeManager.Instance.GetDateByLinuxTimeStamp(curresntSevenrTime);
                //每日刷新时间
                DateTime targetDateTime = new DateTime(currentTime.Year, currentTime.Month, currentTime.Day, 8, 0, 0);
                //次数刷新判断
                if (TimeManager.Instance.GetDateByLinuxTimeStamp(lastTime) < targetDateTime && currentTime >= targetDateTime)
                {
                    action?.Invoke(curresntSevenrTime);
                    SaveDataManager.Instance.Save();
                }
                callBack?.Invoke();
            }
            , "GetServerTime");
        }



        ///服务器和本地时间差值
        public void TimeDifferenceValue(Action<long, long> action)
        {
            long serverTime = 0;
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(() => { serverTime = RpcServer.Instance.Client.GetServerTime(); }, () =>
            {
                //当前时间
                long loaclTime = TimeManager.Instance.GetTimestamp(DateTime.Now);
                action(serverTime, serverTime - loaclTime);
            }, "GetServerTime");
        }

        public thrift.sts.Equipment GetEquipmentDataById(long dbId)
        {
            thrift.sts.Equipment data = null;
            if (equipmentDataDic.ContainsKey(dbId))
                data = equipmentDataDic[dbId];
            return data;
        }

        public thrift.sts.Item CreateThriftItem(Item item)
        {
            thrift.sts.Item new_item = new thrift.sts.Item();
            new_item.DbId = item.dbId;
            new_item.Tid = item.tid;
            new_item.Type = (int)item.type;
            new_item.Amount = item.amount;
            return new_item;
        }


        /// <summary>
        /// 全局方法 根据模板表配置获得奖励 支持货币/装备/材料/消耗品
        /// </summary>
        /// <param name="type"></param>
        /// <param name="tid"></param>
        /// <param name="amount"></param>
        public void GetRewardFromItemTpl(int type, int tid, int amount)
        {
            switch ((Item.Type)type)
            {
                case Item.Type.Currency:
                    {
                        SetTargetCurrency(tid, amount);
                    }
                    break;
                case Item.Type.Equipment:
                    var equipment = TplManager.Instance.GetEquipmentByID(tid);
                    if (equipment != null)
                    {
                        AcquireItem(equipment);
                    }
                    break;
                case Item.Type.Material:
                    var material = TplManager.Instance.GetMaterialByID(tid);
                    if (material != null)
                    {
                        material = material.clone;
                        AcquireItem(material, amount);
                    }
                    break;
                case Item.Type.Consumable:
                    var consumable = TplManager.Instance.GetConsumableByID(tid);
                    if (consumable != null)
                    {
                        consumable = consumable.clone;
                        AcquireItem(consumable, amount);
                    }
                    break;
                case Item.Type.Quests:
                    var quests = TplManager.Instance.GetQuestsByID(tid);
                    if (quests != null)
                    {
                        quests = quests.clone;
                        AcquireItem(quests, amount);
                    }
                    break;
            }
        }
        /// <summary>
        /// 全局方法 根据模板表配置获得物品数量 支持货币/装备/材料/消耗品
        /// </summary>
        /// <param name="type"></param>
        /// <param name="tid"></param>
        /// <param name="amount"></param>
        public double GetAmountFromItemTpl(int type, int tid)
        {
            double amount = 0;
            switch ((Item.Type)type)
            {
                case Item.Type.Currency:
                    amount = GetTargetCurrency(tid);
                    break;
                case Item.Type.Equipment:
                    break;
                case Item.Type.Material:
                    amount = GetItemAmount(tid, Item.Type.Material);
                    break;
                case Item.Type.Consumable:
                    amount = GetItemAmount(tid, Item.Type.Consumable);
                    break;
                case Item.Type.Quests:
                    amount = GetItemAmount(tid, Item.Type.Quests);
                    break;
            }
            return amount;
        }
        /// <summary>
        /// 全局方法 根据模板表配置获得物品图标 支持货币/装备/材料/消耗品
        /// </summary>
        /// <param name="type"></param>
        /// <param name="tid"></param>
        /// <param name="amount"></param>
        public Sprite GetIconFromItemTpl(int type, int tid)
        {
            Sprite icon = null;
            switch ((Item.Type)type)
            {
                case Item.Type.Currency:
                    TplCurrency tplCurr = TplManager.Instance.GetCurrencyById(tid);
                    icon = tplCurr.icon_itemB;
                    break;
                case Item.Type.Equipment:
                    Equipment equi = TplManager.Instance.GetEquipmentByID(tid);
                    icon = equi.icon;
                    break;
                case Item.Type.Material:
                    Materials mate = TplManager.Instance.GetMaterialByID(tid);
                    if (mate.iconB != null)
                        icon = mate.iconB;
                    else
                        icon = mate.icon;
                    break;
                case Item.Type.Consumable:
                    Consumable cons = TplManager.Instance.GetConsumableByID(tid);
                    if (cons.iconB != null)
                        icon = cons.iconB;
                    else
                        icon = cons.icon;
                    break;
                case Item.Type.Quests:
                    Quests quest = TplManager.Instance.GetQuestsByID(tid);
                    if (quest.iconB != null)
                        icon = quest.iconB;
                    else
                        icon = quest.icon;
                    break;
            }
            return icon;
        }


        //远程调用 修改神力结晶
        public void RpcChangeSacredCrystal(long amount)
        {
            CurrencyChanged CurrencyRespon = null;
            //等待网络通信协程
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
                () => { CurrencyRespon = RpcServer.Instance.Client.ChangeSC(userId, amount); },
                () => { ChangeSCCallback(CurrencyRespon); }
                , "ChangeSC");

        }


        //远程调用 修改神力结晶回调
        private void ChangeSCCallback(CurrencyChanged CurrencyRespon)
        {
            //根据网络通讯结果处理后续流程
            ChangeSacredCrystal(CurrencyRespon.ChangedValue, CurrencyRespon.CurrVaule);
        }

        //远程调用 修改金币 暂时保留
        //public void RpcChangeGold(long amount, int EventType)
        //{
        //    CurrencyChanged CurrencyRespon = null;
        //    //等待网络通信协程
        //    RpcServer.Instance.netServerControll.CallRpcRemoteThread(
        //        () => { CurrencyRespon = RpcServer.Instance.Client.ChangeGold(userId, amount, EventType); },
        //        () => { ChangeGoldCallback(CurrencyRespon); }
        //        , "RpcChangeGold");

        //}

        ////远程调用 修改神力结晶回调
        //private void ChangeGoldCallback(CurrencyChanged CurrencyRespon)
        //{
        //    //根据网络通讯结果处理后续流程
        //    ChangeGold(CurrencyRespon.ChangedValue, CurrencyRespon.CurrVaule);
        //}



        //获取当前场景中的奖励列表
        public Dictionary<int, long> GetCurrentBattleAward()
        {
            var curBattle = battleConfig.config.tplConfig;
            Dictionary<int, long> temp = new Dictionary<int, long>();
            for (int i = 0; i < curBattle.awardType.Length; i++)
            {
                if (curBattle.awardID[i] != 0)
                {
                    temp.Add(curBattle.awardID[i], (long)curBattle.awardNum[i]);
                }
            }
            return temp;
        }


        public void RpcHeroAwaken(List<HeroAwakenStruct> selectHeroUids, bool isBatch, Action _action)
        {
            BatHeroAwakenRespon respon = null;
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
                () => { respon = RpcServer.Instance.Hero_client.BatchHeroAwaken(userId, selectHeroUids); },
                () =>
                {
                    if (respon.Succ)
                    {
                        Debug.Log(string.Format("回调觉醒英雄：", respon.HeroId.ToString()));
                        Debug.Log(string.Format("回调材料英雄：", respon.RemoveHeroUids.ToString()));
                        Debug.Log(string.Format("回调卸下装备：", respon.UnEquipDbIds.ToString()));
                        //删除英雄
                        List<long> removeHeroUids = respon.RemoveHeroUids;
                        List<HeroData> reomoveList = new List<HeroData>();
                        //组织数据
                        foreach (var heroData in heroDataList)
                        {
                            if (removeHeroUids.Contains(heroData.Udid))
                                reomoveList.Add(heroData);
                            //品质+1
                            else if (respon.HeroId.Contains(heroData.Udid))
                            {
                                heroData.Quality += 1;/*respon.Quality;*/
                                EventManager.Instance.RaiseEvent("增加主线任务进度", new ArrayList() { Type_MainTaskID.一个英雄的品质达到, 0, heroData.Quality });
                                EventManager.Instance.RaiseEvent("增加爵位任务进度", new ArrayList() { Type_GuideTaskID.英雄觉醒1次 });
                            }
                        }
                        if (reomoveList.Count > 0)
                        {
                            for (int i = 0; i < reomoveList.Count; i++)
                            {
                                //在全部英雄中剔除已消耗的英雄
                                heroDataList.Remove(reomoveList[i]);
                                //重新拉取当前编队信息
                                FormationModel.GetAllHeroTeamData();
                            }
                            reomoveList.Clear();
                        }
                        //卸下移除英雄的装备
                        List<int> rewardId = new List<int>();
                        List<int> rewardType = new List<int>();
                        List<double> rewardNum = new List<double>();
                        for (int i = 0; i < respon.UnEquipDbIds.Count; i++)
                        {
                            bool isAgain = false;
                            Equipment equip = inventoryModel.GetEquipment(respon.UnEquipDbIds[i], true);
                            if (equip != null)
                            {
                                inventoryModel.ChangeEquipment(equip, 0);
                                for (int j = 0; j < rewardId.Count; j++)
                                {
                                    if (equip.tid == rewardId[j])
                                    {
                                        rewardNum[j] += 1;
                                        isAgain = true;
                                        break;
                                    }
                                }
                                if (!isAgain)
                                {
                                    rewardId.Add(equip.tid);
                                    rewardType.Add(1);
                                    rewardNum.Add(1);
                                }
                                isAgain = false;
                            }
                        }
                        if (respon.BackReward.Currencys != null)
                        {
                            DataManager.Instance.ChangeCurrencyListCallback(respon.BackReward.Currencys);
                            for (int i = 0; i < respon.BackReward.Currencys.Count; i++)
                            {
                                rewardId.Add(respon.BackReward.Currencys[i].Type);
                                rewardType.Add(0);
                                rewardNum.Add(respon.BackReward.Currencys[i].ChangedValue);
                            }
                        }
                        if (respon.BackReward.Items != null)
                        {
                            for (int i = 0; i < respon.BackReward.Items.Count; i++)
                            {
                                DataManager.Instance.OnAddOrChangeItem(respon.BackReward.Items[i]);
                                rewardId.Add(respon.BackReward.Items[i].Tid);
                                rewardType.Add(respon.BackReward.Items[i].Type);
                                rewardNum.Add(respon.BackReward.Items[i].Amount);
                            }
                        }
                        //其他功能附加调用
                        EventManager.Instance.RaiseEvent("觉醒返回材料", new ArrayList() { rewardId, rewardType, rewardNum });
                        //
                        if (isBatch)
                        {
                            UIManager.Instance.OpenUI(UIModel.UI_AwardPanel);
                            RpcAwardInfo awardInfo = new RpcAwardInfo();
                            awardInfo.titleType = 1;
                            awardInfo.heroList = respon.HeroId;
                            UI_AwardPanel.instance.Init(awardInfo);
                        }
                        //
                        foreach (var udid in respon.HeroId)
                        {
                            if (FormationModel.CheckHeroInTeam(udid))
                            {
                                EventManager.Instance.RaiseEvent("指定英雄卡更新", new ArrayList() { udid, false });
                            }
                        }
                        DataManager.UpgradeBuildingModel.SetUserDataDic(respon.BuildData);
                        EventManager.Instance.RaiseEvent("更新建筑升级红点");
                        //后续Ui表现
                        if (_action != null)
                            _action.Invoke();
                    }
                    else
                    {
                        Debug.LogError("英雄觉醒 失败!");
                    }


                });

        }
        //英雄阵线升级
        public void RpcHeroRankUp(List<HeroAwakenStruct> selectHeroUids, bool isBatch, Action _action)
        {
            BatHeroAwakenRespon respon = null;
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
                () => { respon = RpcServer.Instance.Hero_client.heroTypeLevelUp(userId, selectHeroUids); },
                () =>
                {
                    if (respon.Succ)
                    {
                        Debug.Log(string.Format("回调觉醒英雄：", respon.HeroId.ToString()));
                        Debug.Log(string.Format("回调材料英雄：", respon.RemoveHeroUids.ToString()));
                        Debug.Log(string.Format("回调卸下装备：", respon.UnEquipDbIds.ToString()));
                        //删除英雄
                        List<long> removeHeroUids = respon.RemoveHeroUids;
                        List<HeroData> reomoveList = new List<HeroData>();
                        //组织数据
                        foreach (var heroData in heroDataList)
                        {
                            if (removeHeroUids.Contains(heroData.Udid))
                                reomoveList.Add(heroData);
                            //品质+1
                            else if (respon.HeroId.Contains(heroData.Udid))
                            {
                                heroData.TypeLevel += 1;/*respon.Quality;*/
                            }
                        }
                        if (reomoveList.Count > 0)
                        {
                            for (int i = 0; i < reomoveList.Count; i++)
                            {
                                //在全部英雄中剔除已消耗的英雄
                                heroDataList.Remove(reomoveList[i]);
                                FormationModel.GetAllHeroTeamData();
                            }
                            reomoveList.Clear();
                        }
                        //卸下移除英雄的装备
                        List<int> rewardId = new List<int>();
                        List<int> rewardType = new List<int>();
                        List<double> rewardNum = new List<double>();
                        List<int> rewardQuality = new List<int>();
                        for (int i = 0; i < respon.UnEquipDbIds.Count; i++)
                        {
                            bool isAgain = false;
                            Equipment equip = inventoryModel.GetEquipment(respon.UnEquipDbIds[i], true);
                            if (equip != null)
                            {
                                inventoryModel.ChangeEquipment(equip, 0);
                                for (int j = 0; j < rewardId.Count; j++)
                                {
                                    if (equip.tid == rewardId[j])
                                    {
                                        rewardNum[j] += 1;
                                        isAgain = true;
                                        break;
                                    }
                                }
                                if (!isAgain)
                                {
                                    rewardId.Add(equip.tid);
                                    rewardType.Add(1);
                                    rewardNum.Add(1);
                                }
                                isAgain = false;
                            }
                        }

                        if (respon.BackReward.Currencys != null)
                        {
                            ChangeCurrencyListCallback(respon.BackReward.Currencys);
                            for (int i = 0; i < respon.BackReward.Currencys.Count; i++)
                            {
                                rewardId.Add(respon.BackReward.Currencys[i].Type);
                                rewardType.Add(0);
                                rewardNum.Add(respon.BackReward.Currencys[i].ChangedValue);
                            }
                        }
                        if (respon.BackReward.Items != null)
                        {
                            for (int i = 0; i < respon.BackReward.Items.Count; i++)
                            {
                                OnAddOrChangeItem(respon.BackReward.Items[i]);
                                rewardId.Add(respon.BackReward.Items[i].Tid);
                                rewardType.Add(respon.BackReward.Items[i].Type);
                                rewardNum.Add(respon.BackReward.Items[i].Amount);
                            }
                        }



                        //其他功能附加调用
                        EventManager.Instance.RaiseEvent("阵线返回材料", new ArrayList() { rewardId, rewardType, rewardNum });
                        //
                        if (isBatch)
                        {
                            UIManager.Instance.OpenUI(UIModel.UI_AwardPanel);
                            RpcAwardInfo awardInfo = new RpcAwardInfo();
                            awardInfo.titleType = 0;
                            awardInfo.heroList = respon.HeroId;
                            UI_AwardPanel.instance.Init(awardInfo);
                        }
                        //
                        foreach (var udid in respon.HeroId)
                        {
                            if (FormationModel.CheckHeroInTeam(udid))
                            {
                                EventManager.Instance.RaiseEvent("指定英雄卡更新", new ArrayList() { udid, false });
                            }
                        }
                        DataManager.UpgradeBuildingModel.SetUserDataDic(respon.BuildData);
                        EventManager.Instance.RaiseEvent("更新建筑升级红点");
                        //后续Ui表现
                        if (_action != null)
                            _action.Invoke();
                    }
                    else
                    {
                        Debug.LogError("英雄阵线升级 失败!");
                    }


                });

        }

        public void HeroBack(List<long> selectHeroUids, Action _action)//英雄遣散
        {
            HeroBackRespon respon = null;

            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
                () => { respon = RpcServer.Instance.Hero_client.GetHeroBack(userId, selectHeroUids); },
                () =>
                {
                    if (respon.Succ)
                    {

                        if (respon.Equipments != null)
                        {
                            UpdateCarriageEquipment(selectHeroUids, respon.Equipments);
                            for (int i = 0; i < respon.Equipments.Count; i++)
                                OnAddEquipment(respon.Equipments[i]);
                        }
                        List<long> removeHeroUids = selectHeroUids;
                        int index = 0;
                        List<HeroData> removeList = new List<HeroData>();
                        foreach (var heroData in heroDataList)
                        {
                            if (removeHeroUids.Contains(heroData.Udid))
                            {
                                removeList.Add(heroData);

                            }
                            index++;
                        }

                        if (removeList.Count > 0)
                        {
                            for (int i = 0; i < removeList.Count; i++)
                            {
                                heroDataList.Remove(removeList[i]);
                            }
                            removeList.Clear();
                        }
                        List<Hero> removeList2 = new List<Hero>();
                        foreach (var heroData in heroInfoList)
                        {
                            if (removeHeroUids.Contains(heroData.udid))
                            {
                                removeList2.Add(heroData);

                            }
                            index++;
                        }

                        if (removeList2.Count > 0)
                        {
                            for (int i = 0; i < removeList2.Count; i++)
                            {
                                heroInfoList.Remove(removeList2[i]);
                            }
                            removeList2.Clear();
                        }
                        // RpcGetHeroList();

                        if (respon.Currency != null)
                        {
                            ChangeCurrencyListCallback(respon.Currency);
                        }
                        if (respon.Materials != null)
                        {
                            for (int i = 0; i < respon.Materials.Count; i++)
                                OnAddOrChangeItem(respon.Materials[i]);
                        }

                        EventManager.Instance.RaiseEvent("遣散成功");
                        //重新拉取英雄编队信息
                        FormationModel.GetAllHeroTeamData();
                        if (_action != null)
                            _action.Invoke();
                    }
                    else
                    {
                        Debug.LogError(respon.Code);
                    }
                });
            //删除英雄

        }


        public HeroData UpdateHeroData(HeroData heroData)
        {
            int index = 0;
            foreach (var data in heroDataList)
            {
                if (data.Udid == heroData.Udid)
                {
                    break;
                }
                index++;
            }
            if (index <= heroDataList.Count - 1)
                return heroDataList[index];
            //    heroDataList.RemoveAt(index);            
            //heroDataList.Add(heroData);
            else
                return null;


        }

        //获取品质对应的颜色
        public float GetColorIndex(int _quality)
        {
            float color = 0;
            switch (_quality)
            {
                case (int)Item.QualityType.普通:
                    color = 0;
                    break;
                case (int)Item.QualityType.精良:
                    color = 1;
                    break;
                case (int)Item.QualityType.稀有:
                    color = 2;
                    break;
                case (int)Item.QualityType.稀有加:
                    color = 2.5f;
                    break;
                case (int)Item.QualityType.精英:
                    color = 3;
                    break;
                case (int)Item.QualityType.精英加:
                    color = 3.5f;
                    break;
                case (int)Item.QualityType.史诗:
                    color = 4;
                    break;
                case (int)Item.QualityType.史诗加:
                    color = 4.5f;
                    break;
                case (int)Item.QualityType.传说:
                    color = 5;
                    break;
                case (int)Item.QualityType.传说加:
                    color = 5.5f;
                    break;
                case (int)Item.QualityType.神话:
                    color = 6;
                    break;
                case (int)Item.QualityType.怪物通用品质:
                    color = 7;
                    break;

            }
            return color;
        }

        public void SetBossLevelAutoSkillState(bool active)
        {
            bossLevelAutoSkill = active;
            EventManager.Instance.RaiseEvent("HeroAutoSkillRelease", active);
        }


        //判断是否获得奖励
        public bool isGetReward()
        {
            int level = GetStage() + 10000;
            int id = level >= 20000 ? level - 10000 : level;
            if (10001 + GetMaxTotalLevel(ReChapter, ReLevel) < level)
                return true;
            else
                return false;
        }

        //判断一个英雄是否已经拥有
        public bool CheckHeroIsHad(int _tid)
        {
            bool status = false;
            foreach (var hero in heroInfoList)
            {
                if (hero.id == _tid)
                {
                    status = true;
                    break;
                }
            }
            return status;
        }

        //获取一个商品的今日的购买次数
        public int Get_CargoDataList_BuyNum(int _id)
        {
            int buyNum = -1;
            foreach (var data in cargoDataList)
            {
                if (data.tid == _id)
                {
                    buyNum = data.buyNum;
                }
            }
            return buyNum;
        }


        public ArrayList SplitTplItemArray(string[] _array)
        {
            List<int> typeList = new List<int>();
            List<int> idList = new List<int>();
            List<int> numList = new List<int>();
            foreach (var item in _array)
            {
                int[] str = Array.ConvertAll(item.Split('-'), s => int.Parse(s));
                typeList.Add(str[0]);
                idList.Add(str[1]);
                numList.Add(str[2]);
            }
            return new ArrayList { typeList, idList, numList };
        }

        /// <summary>
        /// 通用方法解释服务端返回的rewardStr 并调用打开通用奖励框 用来客户端显示
        /// </summary>
        /// <param name="rewardStr"></param>
        public void ParseRewardStrByServer(string rewardStr, List<long> heroList = null, bool isAdd = false, UnityAction action = null)
        {
            List<int> awardId = new List<int>();
            List<int> awardType = new List<int>();
            List<double> awardNum = new List<double>();

            //TplManager.Instance.GetItemById();
            if (!ValidateStr(rewardStr))
            {
                return;
            }
            //todo 需要一个字符串验证方法

            string[] awardCount = rewardStr.Split('|');
            for (int i = 0; i < awardCount.Length; i++)
            {
                string[] award2 = awardCount[i].Split('-');

                if (award2[0] == "7")//好感度不显示
                    continue;
                awardType.Add(int.Parse(award2[0]));
                awardId.Add(int.Parse(award2[1]));
                awardNum.Add(int.Parse(award2[2]));
            }
            if (awardType.Count <= 0)
                return;
            Debug.LogError($"---------{awardType.Count}-------{awardId.Count}--------{awardNum.Count}---------------------");
            // EventManager.Instance.RaiseEvent("打开通用奖励框", new ArrayList() { awardId, awardType, awardNum });
            //UIManager.Instance.OpenUI(UIModel.UI_AwardPanel);
            UIManager.Instance.OpenUI(UIModel.UI_AwardPanel);
            RpcAwardInfo awardInfo = new RpcAwardInfo();
            awardInfo.itemId = awardId;
            awardInfo.itemType = awardType;
            awardInfo.itemNum = awardNum;
            awardInfo.heroList = heroList;
            awardInfo.isAdd = isAdd;
            awardInfo._btnAction = action;
            UI_AwardPanel.instance.Init(awardInfo);
        }


        public List<long> delMailList = new List<long>();
        public List<long> idMailList = new List<long>();//邮件编号索引
        public List<long> longList = new List<long>();
        public List<MailData> mailData = new List<MailData>();//记录当前的邮件列表 （与服务端同步）

        public struct 邮件附件图标
        {
            public Sprite icon;
            public int num;
        }

        public List<邮件附件图标> 邮件附件图标列表 = new List<邮件附件图标>();//需要从maildata获取数据

        public void 解析itemStr(string rewardStr, List<Item> itemIconList, List<int> intList)
        {
            List<int> awardId = new List<int>();
            List<int> awardType = new List<int>();
            List<int> awardNum = new List<int>();
            // List<Item> item = new List<Item>();
            if (!ValidateStr(rewardStr))
            {
                return;
            }
            string[] awardCount = rewardStr.Split('|');
            for (int i = 0; i < awardCount.Length; i++)
            {
                string[] award2 = awardCount[i].Split('-');
                awardType.Add(int.Parse(award2[0]));
                awardId.Add(int.Parse(award2[1]));
                awardNum.Add(int.Parse(award2[2]));
                itemIconList.Add(TplManager.Instance.GetItemById(awardType[i], awardId[i], awardNum[i]));
                intList.Add(awardNum[i]);
            }
        }

        public void GetMailBack(List<MailData> mailDatas, Action action = null)//从服务端拉取邮件列表
        {


            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
                () =>
                {
                    mailData = RpcServer.Instance.Client.GetMails(userId);
                },
                () =>
                {
                    if (mailData.Count > 100)//通过这种方法维护maildata.count不超过100
                    {
                        mailData.RemoveRange(100, mailData.Count - 100);
                    }



                    if (mailData != null)
                    {
                        mailDatas.Clear();
                        for (int i = 0; i < mailData.Count; i++)
                        {
                            if (!delMailList.Contains(mailData[i].Id))
                            {
                                Debug.LogError("----------------------成功移除---------------------------");
                                if (mailDatas.Count <= 100)
                                    mailDatas.Add(mailData[i]);
                            }
                            // mailDatas.Add(mailData[i]);
                        }
                        //for (int i = 0; i < mailData.Count; i++)
                        //{
                        //    Debug.LogError($"--------实时邮件状态------{mailData.Count}-------{mailData[i].BGet}-------{mailData[i].BRead}---------------------");
                        //    Debug.LogError($"--------实时邮件状态s------{mailDatas.Count}-------{mailDatas[i].BGet}-------{mailDatas[i].BRead}---------------------");
                        //    //Debug.LogError($"----------------------------------{respon[i].ItemStr}----------------------------------------------");
                        //}
                    }
                    //Debug.LogError($"-------------mailData.Count---------{mailData.Count}---------------------------");
                    //Debug.LogError($"-------------mailDatas.Count---------{mailData.Count}---------------------------");
                    action?.Invoke();
                });
        }
        public void GetMail(List<long> longList, Action action = null)//领取邮件
        {
            RewardMailRespon respon = null;
            Debug.LogError($"---------------------------------{longList.Count}------------------");

            if (longList.Count == 0)
            {
                return;
            }

            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
              () => { respon = RpcServer.Instance.Client.GetMailRewards(userId, longList); },
              () =>
              {
                  if (respon.Rewards.RewardObj.Currencys != null)
                  {
                      //Debug.LogError("------------------------成功改变货币之前--------------------------");
                      ChangeCurrencyListCallback(respon.Rewards.RewardObj.Currencys);
                      // Debug.LogError($"---------respon.Rewards.RewardObj.Currencys[0].ChangedValue---------------{respon.Rewards.RewardObj.Currencys[0].ChangedValue}--------------------------");
                  }
                  if (respon.Rewards.RewardObj.Items != null)
                  {
                      for (int i = 0; i < respon.Rewards.RewardObj.Items.Count; i++)
                          OnAddOrChangeItem(respon.Rewards.RewardObj.Items[i]);
                  }
                  if (respon.Rewards.RewardObj.Equipments != null)
                  {
                      for (int i = 0; i < respon.Rewards.RewardObj.Equipments.Count; i++)
                          OnAddEquipment(respon.Rewards.RewardObj.Equipments[i]);
                  }
                  ParseRewardStrByServer(respon.Rewards.RewardStr);
                  action?.Invoke();
              });
        }
        public void readMail(List<long> longList)
        {
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
             () => { RpcServer.Instance.Client.ReadMails(userId, longList); },
             () =>
             {
                 Debug.LogError($"------------------------------已读邮件----------------------------------");
             });
        }
        public void DelMail(List<long> longList, Action action = null)
        {
            // List<long> LongList = new List<long>();
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
              () => { delMailList = RpcServer.Instance.Client.DelMails(userId, longList); },
              () =>
              {
                  Debug.LogError($"删除邮件成功-------------------{delMailList.Count}-------------------------");
                  action?.Invoke();
              });
        }

        public static bool ValidateStr(String itemStr)//校验
        {
            if (itemStr == null)
            {
                return false;
            }
            String[] itemlen = itemStr.Split('|');
            for (int i = 0; i < itemlen.Length; i++)
            {
                String[] cell = itemlen[i].Split('-');
                if (cell.Length != 3)
                    return false;
            }
            return true;
        }





        public void GetRewardByObj(GiftCodeRewardBack respon)
        {
            if (respon.RewardObj != null)
            {
                if (respon.RewardObj.Currencys != null)
                {
                    DataManager.Instance.ChangeCurrencyListCallback(respon.RewardObj.Currencys);
                }
                if (respon.RewardObj.Items != null)
                {
                    for (int i = 0; i < respon.RewardObj.Items.Count; i++)
                    {
                        DataManager.Instance.OnAddOrChangeItem(respon.RewardObj.Items[i]);
                    }
                }
                if (respon.RewardObj.Equipments != null)
                {
                    for (int i = 0; i < respon.RewardObj.Equipments.Count; i++)
                    {
                        DataManager.Instance.OnAddEquipment(respon.RewardObj.Equipments[i]);
                    }
                }
            }
        }

        public void RpcInitSkillData()
        {
            List<HeroSkillRespon> respons = new List<HeroSkillRespon>();
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
                            () =>
                            {
                                respons = RpcServer.Instance.Hero_client.GetHeroSkillData(DataManager.Instance.userId);
                            },
                            () =>
                            {
                                if (respons != null && respons.Count > 0)
                                {
                                    Debug.Log("拉取技能信息成功");
                                    allHeroSkills = respons;
                                }
                                else
                                {
                                    Debug.Log("拉取技能信息失败");
                                }
                            });
        }

        public void AddRankSkill()
        {
            FormationTypes currentType = FormationTypes.basicPlot;
            if (battleConfig == null)
            {
                currentType = FormationTypes.basicPlot;
            }
            else
            {
                switch (battleConfig.curBattleType)
                {
                    case BattleType.章节模式:
                        currentType = FormationTypes.basicPlot;
                        break;
                    case BattleType.试炼模式:
                        currentType = FormationTypes.mazeBattle;
                        break;
                    case BattleType.竞技场模式:
                        currentType = FormationTypes.arena_attack;
                        break;
                    case BattleType.灵魂要塞:
                        currentType = FormationTypes.fortress;
                        break;
                    case BattleType.剧情模式:
                        currentType = FormationTypes.storyBattle;
                        break;
                    default:
                        currentType = FormationTypes.basicPlot;
                        break;
                }
            }

            for (int i = 0; i < 2; i++)
            {
                if (i == 1 && battleConfig.curBattleType != BattleType.竞技场模式) continue;//竞技场敌人
                if (i == 1 && battleConfig.curBattleType == BattleType.竞技场模式)//竞技场敌人
                {
                    HeroTeamDataManager.Instance.CalcRank(FormationTypes.arena_attack, opponentBattleTeamHeros, isEnemy: true);
                }
                else
                {
                    HeroTeamDataManager.Instance.CalcRank(currentType);
                }
            }
        }


        public List<TopHeroInfo> _topHeroInfo;

        public List<TopHeroInfo> topHeroInfo
        {
            get
            {
                if (_topHeroInfo == null)
                {
                    _topHeroInfo = new List<TopHeroInfo>();
                    for (int i = 0; i < userData.topHeroLv.Count; i++)
                    {
                        _topHeroInfo.Add(new TopHeroInfo(userData.topHeroUdid[i], userData.topHeroLv[i]));
                    }
                }
                return _topHeroInfo;
            }
        }

        public void ChangeTopHeroInfoToLocal()
        {
            userData.topHeroUdid.Clear();
            userData.topHeroLv.Clear();
            for (int i = 0; i < topHeroInfo.Count; i++)
            {
                userData.topHeroUdid.Add(topHeroInfo[i].topHeroUdid);
                userData.topHeroLv.Add(topHeroInfo[i].topHeroLevel);
            }
        }

        public void DealTopLv(long udid, int lv)
        {
            if (topHeroInfo == null || topHeroInfo.Count == 0)
            {
                topHeroInfo.Add(new TopHeroInfo(udid, lv));
                return;
            }
            if (topHeroInfo.Count >= 3 && lv <= topHeroInfo[topHeroInfo.Count - 1].topHeroLevel)
            {
                return;
            }
            bool findFlag = false;
            for (int i = 0; i < topHeroInfo.Count; i++)
            {
                if (topHeroInfo[i].topHeroUdid == udid)
                {
                    findFlag = true;
                    topHeroInfo[i] = new TopHeroInfo(udid, topHeroInfo[i].topHeroLevel >= lv ? topHeroInfo[i].topHeroLevel : lv);
                    break;
                }
            }
            if (!findFlag)
            {
                topHeroInfo.Add(new TopHeroInfo(udid, lv));
            }
            topHeroInfo.Sort((e1, e2) => e1.Sort(e2));
            if (topHeroInfo.Count > 3)
            {
                topHeroInfo.RemoveRange(3, 1);
            }
            ChangeTopHeroInfoToLocal();
        }

        //GM 增加货币
        public void GMAddCurrency(int type, long num)
        {
            thrift.sts.ServerRespon respon = null;
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
                () =>
                {
                    string format = $"{ServerGMConst.SYSTEM_CALL} {ServerGMConst.CURRENCY} {type} {num}";
                    respon = RpcServer.Instance.Client.GMCode(DataManager.Instance.userId, format);
                },
                () =>
                {
                    Debug.Log(respon.ToString());
                    if (respon.Succ)
                    {
                        ChangeCurrencyListCallback(respon.Currency);
                    }
                    else
                    {
                        Debug.LogError(respon.Code);
                    }
                });
        }

        public void Update_OpComplete()
        {
            opComplete = true;
            SaveDataManager.Instance.Save();
        }

        /// <summary>
        ///消耗行动力接口
        /// </summary>
        /// <param name="eventId"></param>
        public void CostActionPoint(TplActionPointConsumption tplinfo)
        {
            if (currentActionPoint < tplinfo.point)
            {
                UIGlobal.instance.SendBubble("行动力不足");
                return;
            }
            ActionPoint respon = null;
            //发起网络通信
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
                 () => { respon = RpcServer.Instance.Actionpoint_client.CostPoint(DataManager.Instance.userId, tplinfo.id); },
                () =>
                {
                    DataManager.Instance.currentActionPoint = respon.CurrentActionPoint;
                    DataManager.Instance.costActionPoint = respon.CostActionPoint;
                    EventManager.Instance.RaiseEvent("更新行动力");
                });
        }

        public void RpcGetCd()
        {
            List<int> cdID = new List<int>();
            cdID.Add(1003);
            List<CD> respons = new List<CD>();
            RpcServer.Instance.netServerControll.CallRpcRemoteThread(
                        () =>
                        {
                            respons = RpcServer.Instance.Player_client.GetCD(DataManager.Instance.userId, cdID);
                        },
                        () =>
                        {
                            bool haveFree = false;
                            if (respons != null && respons.Count > 0)
                            {
                                for (int i = 0; i < respons.Count; i++)
                                {
                                    if (respons[i].Tid.Equals(1003))
                                    {
                                        haveFree = respons[i].CurrValue > 0 ? true : false;
                                    }
                                }
                            }
                            rps.SetRedPointNodeCallBack(RedPointConst.quickHangUp, redPointNum: haveFree ? 1 : 0);
                        });
        }


        public long SearchHero(int HeroTid)
        {
            int maxLevel = -1;
            UI_HeroInfoModel.Hero hero = null;
            for (int j = 0; j < heroInfoList.Count; j++)//选出英雄列表中等级最高的
            {
                if (heroInfoList[j].id == HeroTid)
                {
                    if (heroInfoList[j].potency > maxLevel)
                    {
                        maxLevel = heroInfoList[j].potency;
                        hero = heroInfoList[j];
                    }
                }
            }
            return hero.udid;
        }



    }


}
